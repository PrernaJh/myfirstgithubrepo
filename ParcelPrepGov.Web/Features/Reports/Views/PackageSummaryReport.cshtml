@{
    ViewData["Title"] = "Daily Package Summary";

}

<h2 class="content-block"> Reporting<i class="dx-icon dx-icon-spinright"> </i> Daily Package Summary</h2>
<p class="page-desc">
    Daily Package Summary
</p>

<div class="content-block">
    <div class="dx-card">
        <div class="ppg-container-cols">
            <div class="dx-col-2">
                <label>Site</label>

                @(Html.DevExtreme().SelectBox()
                .ID("siteName")
                .Name("SiteName")
                .DataSource(d => d.Mvc().Controller("Common").LoadAction("GetSiteSelectBoxData"))
                .Placeholder("Name")
                .DisplayExpr("Description")
                .DeferRendering(false)
                .ValueExpr("Name")
                .OnValueChanged("PPG.reports.onSiteValueChanged")
                .Width(250)
    )
            </div>
            <div class="dx-col-2">
                <label>Manifest Date</label>

                @(Html.DevExtreme().DateBox()
        .ID("manifestDate")
				.Name("ManifestDate")
				.OnValueChanged("PPG.reports.onManifestDateChanged")
				.Type(DateBoxType.Date)
				.Value(DateTime.Now)
		        .Width(250)

    )
            </div>
            <div class="dx-col-1" style="text-align:right">
                @(Html.DevExtreme().Button()
		        .ID("runReportButton")
				.Text("Run Report")
                .ValidationGroup("SubClientName")
				.OnClick("PPG.reports.onRunPackageSummaryReport")

    )
            </div>
            <div class="dx-col-1" style="text-align:right">
                @(Html.DevExtreme().Button()
                    .ID("btnExport")
                    .Text("Export")
                    .Disabled(false)
                    .Icon("xlsxfile")
                    .ValidationGroup("SubClientName")
                    .OnClick("PPG.reports.packageSummaryExportFile")
                )
            </div>
        </div>
    </div>
</div>
<div class="content-block">
    <div class="dx-card" id="reportsCard">
        <div>
            <div style="grid-column: 1 / span 12; height: 100%; width: 100%;">
                @(Html.DevExtreme().Button().Text("Clear Filters").ID("clearFilterBtn").OnClick("PPG.reports.clearFilters"))
                @(Html.DevExtreme().DataGrid<ParcelPrepGov.Reports.Models.SprocModels.DailyPackageSummary>()
                    .ID("reportsGrid")
                    .DataSource(d => d.Mvc()
                    .Controller("Reports")
                    .LoadAction(nameof(ParcelPrepGov.Web.Features.Reports.ReportsController.GetPackageSummaryReport))
                    .LoadParams(new {
                        siteName = new JS("PPG.reports.getSelectedSite"),
                        manifestDate = new JS("PPG.reports.getManifestDate") })
                    )
                    .OnDataErrorOccurred("PPG.reports.runAndExportButtonReenable")
                    .LoadPanel(lp => lp.Enabled(true))
                    .Width("100%")
                    .Height(600)
                    .OnCellPrepared("cell_prepared")
                    .ShowBorders(true)
                    .ShowRowLines(true)
                    .ShowColumnLines(true)
                    .Scrolling(scrolling =>
                    {
                        scrolling.Mode(GridScrollingMode.Virtual);
                        scrolling.ColumnRenderingMode(GridColumnRenderingMode.Virtual);
                        scrolling.ShowScrollbar(ShowScrollbarMode.Always);
                    })
                    .AllowColumnResizing(true)
                    .ColumnResizingMode(ColumnResizingMode.Widget)
                    .ColumnAutoWidth(true)
                    .Sorting(sorting => sorting.Mode(GridSortingMode.Multiple))
                    .Columns(columns =>
                    {
                        columns.AddFor(m => m.CUST_NAME).DataType(GridColumnDataType.String).CssClass("minimal").SortOrder(SortOrder.Asc);
                        columns.AddFor(m => m.MANIFEST_DATE).DataType(GridColumnDataType.Date).CssClass("minimal").CalculateCellValue(@<text>
                                function(data) {
                                    return data.MANIFEST_DATE_STRING;
                                }
                            </text>);
                        columns.AddFor(m => m.PRODUCT).DataType(GridColumnDataType.String).CssClass("minimal").SortOrder(SortOrder.Asc);
                        columns.AddFor(m => m.PIECES).DataType(GridColumnDataType.Number).CssClass("minimal");
                        columns.AddFor(m => m.WEIGHT).DataType(GridColumnDataType.Number).CssClass("minimal");

                    })
                    .Paging(paging => paging.Enabled(false))
                    .Summary(s => s.TotalItems(items =>
                    {
                        items.AddFor(m => m.PIECES).SummaryType(SummaryType.Sum);
                        items.AddFor(m => m.WEIGHT).SummaryType(SummaryType.Sum).CustomizeText(@<text>
                                function(data) { return data.value.toFixed(2); }
                            </text>);
                    }))
                    )
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script src="~/js/ppg/ppg.reports-reports.bundle.min.js" asp-append-version="true"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function documentReady() {
            this.removeEventListener('DOMContentLoaded', documentReady);
            PPG.reports.init('Package Summary Report');
        });

        function cell_prepared(options) {
            options.cellElement.html(options.value);
        }
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.3.1/exceljs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.8/FileSaver.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.4.0/polyfill.min.js"></script>
}
