@{
    ViewData["Title"] = "Daily Container Report";

}


<h2 class="content-block">Reporting<i class="dx-icon dx-icon-spinright"></i>Daily Container Report</h2>
<p class="page-desc">
    Daily Container Report
</p>

<div class="content-block">
    <div class="dx-card">
        <div class="ppg-container-cols">
            <div class="dx-col-2">
                <label>Site</label>
                @(Html.DevExtreme().SelectBox()
                .ID("siteName")
                .Name("SiteName")
                .DataSource(d => d.Mvc().Controller("Common").LoadAction("GetSiteSelectBoxData"))
                .Placeholder("Name")
                .DisplayExpr("Description")
                .DeferRendering(false)
                .ValueExpr("Name")
                .OnValueChanged("PPG.reports.onSiteValueChanged")
                .Width(280))
            </div>
            <div class="dx-col-2">
                <label>Manifest From Date</label>
                @(Html.DevExtreme().DateBox()
                .ID("manifestStartDate")
                .Name("ManifestStartDate")
                .OnValueChanged("PPG.reports.onManifestDateChanged")
                .Type(DateBoxType.Date)
                .Value(DateTime.Now)
                .Width(170)
                )
            </div>
            <div class="dx-col-1" style="text-align:right">
                @(Html.DevExtreme().Button()
		        .ID("runReportButton")
				.Text("Run Report")
                .ValidationGroup("SiteName")
				.OnClick("PPG.reports.onRunDailyContainerReport")

            )
            </div>
            <div class="dx-col-1" style="text-align:right">
                @(Html.DevExtreme().Button()
                    .ID("btnExport")
                    .Text("Export")
                    .Disabled(false)
                    .Icon("xlsxfile")
                    .ValidationGroup("SiteName")
                    .OnClick("PPG.reports.dailyContainerReportExportFile"))
            </div>
        </div>
    </div>
</div>


<div class="content-block">
    <div class="dx-card" id="reportsCard">
        <div class="ppg-container-cols">
            <div style="grid-column: 1 / span 12;">
                @(Html.DevExtreme().Button().Text("Clear Filters").ID("clearFilterBtn").OnClick("PPG.reports.clearFilters"))
                <br />
                <br />
                @(Html.DevExtreme().DataGrid<ParcelPrepGov.Reports.Models.SprocModels.DailyContainerMaster>()
                    .ID("reportsGrid")
                    .DataSource(d => d.Mvc()
                    .Controller("Reports")
                    .LoadAction(nameof(ParcelPrepGov.Web.Features.Reports.ReportsController.GetDailyContainerReport))
                    .LoadParams(new {
                        siteName = new JS("PPG.reports.getSelectedSite"),
                        manifestDate = new JS("PPG.reports.getManifestDate")
                    }))
                .ShowBorders(true)
                .HeaderFilter(h => h.Visible(true).AllowSearch(true))
                .AllowColumnResizing(true)
                .OnDataErrorOccurred("PPG.reports.runAndExportButtonReenable")
                .Width("100%")
                        .Height(500)
                        .ShowBorders(true)
                        .ShowRowLines(true)
                        .ShowColumnLines(true)
                        .Scrolling(scrolling =>
                        {
                            scrolling.Mode(GridScrollingMode.Virtual);
                            scrolling.ColumnRenderingMode(GridColumnRenderingMode.Virtual);
                            scrolling.ShowScrollbar(ShowScrollbarMode.Always);
                        })
                .AllowColumnResizing(true)
                .Sorting(sorting => sorting.Mode(GridSortingMode.Single))
                .ColumnResizingMode(ColumnResizingMode.Widget)
                .ColumnAutoWidth(true)
                
                .Columns(columns =>
                {
                    columns.AddFor(m => m.CONTAINER_STATUS).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(false);
                    columns.AddFor(m => m.CONTAINER_OPEN_DATE).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(false);
                        if (User.IsSubClientWebAdministrator() || User.IsSubClientWebUser() 
                            || User.IsClientWebAdministrator() || User.IsClientWebUser()
                            || User.IsCustomerService())
                        {
                            // show nothing
                        }
                        else
                        {
                            columns.AddFor(m => m.OPENED_BY_NAME).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(false);
                        }   
                    columns.AddFor(m => m.TRACKING_NUMBER).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(false);
                    columns.AddFor(m => m.CONTAINER_ID).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(false)
                         .CellTemplate(@<text>
                                <div>
                                    <% if(value !== "null" && value !== null)  { %>
                                        <a href="/ContainerSearch?containerId=<%- value %>" Target=_blank><%- value %></a>
                                    <% } %> 
                                </div>
                            </text>);
                    columns.AddFor(m => m.BIN_NUMBER).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(false);
                    columns.AddFor(m => m.CONT_TYPE).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(true);       
                    columns.AddFor(m => m.CONT_WEIGHT).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(false);                                                                      
                    columns.AddFor(m => m.TOTAL_PACKAGES).DataType(GridColumnDataType.Number).CssClass("minimal").AllowFiltering(false);
                    columns.AddFor(m => m.CARRIER).DataType(GridColumnDataType.String).CssClass("minimal");
                    columns.AddFor(m => m.DROP_SHIP_SITE_KEY).DataType(GridColumnDataType.String).CssClass("minimal");
                    columns.AddFor(m => m.ENTRY_UNIT_NAME).DataType(GridColumnDataType.String).CssClass("minimal");
                    columns.AddFor(m => m.ENTRY_UNIT_CSZ).DataType(GridColumnDataType.String).CssClass("minimal");
                    columns.AddFor(m => m.CONTAINER_CLOSED_DATE).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(false);
                        if (User.IsSubClientWebAdministrator() || User.IsSubClientWebUser() 
                            || User.IsClientWebAdministrator() || User.IsClientWebUser()
                            || User.IsCustomerService())
                        {
                            // show nothing
                        }
                        else
                        {
                            columns.AddFor(m => m.CLOSED_BY_NAME).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(false);
                        }        
                })
                .Summary(s => s.TotalItems(items =>
                {
                    items.AddFor(m => m.CONTAINER_ID).SummaryType(SummaryType.Count);
                }))
                .MasterDetail(md =>
                        md.Enabled(true)
                        .Template(new TemplateName("gridContainer-details-tab1-gridTemplate")))


                    ) @using (Html.DevExtreme().NamedTemplate("gridContainer-details-tab1-gridTemplate"))
                {
                        @(Html.DevExtreme().DataGrid<ParcelPrepGov.Reports.Models.SprocModels.DailyContainerDetail>()
                        .ColumnAutoWidth(true)
                        .AllowColumnResizing(true)
                        .ShowBorders(true)
                        .OnCellPrepared("cell_prepared")
                        .Columns(columns =>
                        {
                            columns.AddFor(m => m.CUST_LOCATION).DataType(GridColumnDataType.String).CssClass("minimal");
                            columns.AddFor(m => m.MANIFEST_DATE).DataType(GridColumnDataType.Date).CssClass("minimal")
                                .CalculateCellValue(@<text>
                                                function(data) {
                                                    return data.MANIFEST_DATE_STRING;
                                                }
                                            </text>);
                            columns.AddFor(m => m.ENTRY_UNIT_NAME).DataType(GridColumnDataType.String).CssClass("minimal");
                            columns.AddFor(m => m.ENTRY_UNIT_CSZ).DataType(GridColumnDataType.String).CssClass("minimal");
                            columns.AddFor(m => m.ENTRY_UNIT_TYPE).DataType(GridColumnDataType.String).CssClass("minimal");
                            columns.AddFor(m => m.PRODUCT).DataType(GridColumnDataType.String).CssClass("minimal");
                            columns.AddFor(m => m.CARRIER).DataType(GridColumnDataType.String).CssClass("minimal");
                            columns.AddFor(m => m.LAST_KNOWN_DESC).DataType(GridColumnDataType.String).CssClass("minimal");
                            columns.AddFor(m => m.LAST_KNOWN_DATE).DataType(GridColumnDataType.String).CssClass("minimal").SortOrder(SortOrder.Desc)
                                .CalculateCellValue(@<text>
                                                function(data) {
                                                    return data.LAST_KNOWN_DATE_STRING;
                                                }
                                            </text>);
                            columns.AddFor(m => m.LAST_KNOWN_LOCATION).DataType(GridColumnDataType.String).CssClass("minimal");
                            columns.AddFor(m => m.LAST_KNOWN_ZIP).DataType(GridColumnDataType.String).CssClass("minimal");
                            columns.AddFor(m => m.PACKAGE_ID).DataType(GridColumnDataType.String).CssClass("minimal")
                                .CalculateCellValue(@<text>
                                                function(data) {
                                                    return PPG.reports.formatPackageHyperLink(data);
                                                }
                                            </text>);
                            columns.AddFor(m => m.TRACKING_NUMBER).DataType(GridColumnDataType.String).CssClass("minimal")
                                .CalculateCellValue(@<text>
                                                function(data) {
                                                    return PPG.reports.formatTrackingHyperLink(data);
                                                }
                                            </text>);
                            columns.AddFor(m => m.CONTAINER_ID).DataType(GridColumnDataType.String).CssClass("minimal")
                                .CalculateCellValue(@<text>
                                                function(data) {
                                                    return PPG.reports.formatContainerHyperLink(data);
                                                }
                                            </text>);
                        })

                        .DataSource(d => d.Mvc()
                        .Controller("Reports")
                        .LoadAction(nameof(ParcelPrepGov.Web.Features.Reports.ReportsController.GetDailyContainerReportDetailsBySingleId))
                        .LoadParams(new {
                            siteName = new JS("PPG.reports.getSelectedSite"),
                            manifestDate = new JS("PPG.reports.getManifestDate"),
                            id = new JS("data.ID")
                        }))
                        )

                }
                </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="~/js/ppg/ppg.reports-reports.bundle.min.js" asp-append-version="true"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function documentReady() {
            this.removeEventListener('DOMContentLoaded', documentReady);
            PPG.reports.init('Daily Container Report');
        });

        var dataGrid,
            taskIdEditor;
        function gridBox_valueChanged(e) {
            var $dataGrid = $("#embedded-datagrid");
            if ($dataGrid.length) {
                var dataGrid = $dataGrid.dxDataGrid("instance");
                dataGrid.selectRows(e.value, false);
                PPG.reports.onSubClientListChanged(e);
            }
        }
        function cell_prepared(options) {
            options.cellElement.html(options.value);
        }
    </script>
}