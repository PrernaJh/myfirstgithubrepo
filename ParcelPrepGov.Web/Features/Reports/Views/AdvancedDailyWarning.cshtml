@using ParcelPrepGov.Web.Features.Reports.Models
@{
    ViewData["Title"] = "Advanced Daily Warning Report";
}

<h2 class="content-block">Reporting<i class="dx-icon dx-icon-spinright"></i>Advanced Daily Warning Report</h2>
<p class="page-desc">
    Advanced Daily Warning Report
</p>

<div class="content-block">
    <div class="dx-card">
        <div class="ppg-container-cols">
            <div class="dx-col-2">
                <label>Customer - Location</label>
                @(Html.DevExtreme().DropDownBox()
                    .DataSource(d => d.Mvc()
                        .Controller("Common")
                        .LoadAction("GetSubClientSelectBoxData")
                        .LoadMode(DataSourceLoadMode.Raw)
                        .Key("Name")
                    )
                    .Placeholder("Choose Customer\\Location")
                    .Width(280)
                    .ShowClearButton(true)
                    .DisplayExpr("Description")
                    .ContentTemplate(new TemplateName("EmbeddedDataGridMultiple"))
                    .StylingMode(EditorStylingMode.Underlined)
                    .ValueExpr("Name")
                    .OnValueChanged("gridBox_valueChanged")
                 )
                @* multi dropdown grid*@
                @using (Html.DevExtreme().NamedTemplate("EmbeddedDataGridMultiple"))
                {
                    @(Html.DevExtreme().DataGrid()
                        .ID("embedded-datagrid")
                        .DataSource(new JS(@"component.getDataSource()"))
                        .Columns(columns =>
                        {
                            columns.Add().DataField("Name");
                        })
                        .Selection(s => s.Mode(SelectionMode.Multiple))
                        .Height(300)
                        .SelectedRowKeys(new JS(@"component.option(""value"")"))
                        .OnSelectionChanged(@<text>
                            function(selectedItems){
                                var keys = selectedItems.selectedRowKeys;
                                component.option("value", keys);
                            }
                        </text>)
                        )
                }
            </div>
            <div class="dx-col-2">
                <label>Manifest From Date</label>
                @(Html.DevExtreme().DateBox()
                .ID("manifestStartDate")
                .Name("ManifestStartDate")
                .Placeholder("Manifest From Date")
                .OnValueChanged("PPG.reports.onManifestStartDateChanged")
                .Type(DateBoxType.Date)
                .Value(DateTime.Now.AddDays(-6))
                .Width(170)
                .Min(DateTime.Now.AddDays(-180))
                .Max(DateTime.Now)
                )
            </div>
            <div class="dx-col-2">
                <label>To Date</label>
                @(Html.DevExtreme().DateBox()
                .ID("manifestEndDate")
                .Name("ManifestEndDate")
                .Placeholder("Manifest To Date")
                .OnValueChanged("PPG.reports.onManifestEndDateChanged")
                .Type(DateBoxType.Date)
                .Value(DateTime.Now)
                .Width(170)
                .Min(DateTime.Now.AddDays(-180))
                .Max(DateTime.Now)
                )
            </div>
            <div class="dx-col-1" style="text-align:right">
                @(Html.DevExtreme().Button()
		                .ID("runReportButton")
				        .Text("Run Report")
                        .ValidationGroup("SubClientName")
				        .OnClick("PPG.reports.onRunDailyWarningReport")
                    )
            </div>
            <div class="dx-col-1" style="text-align:right">
                @(Html.DevExtreme().Button()
                    .ID("btnExport")
                    .Text("Export")
                    .Disabled(false)
                    .Icon("xlsxfile")
                    .ValidationGroup("SubClientName")
                    .OnClick("PPG.reports.advancedDailyWarningExportFile")
                )
            </div>
        </div>
    </div>
</div>



<div class="content-block">
    <div class="dx-card" id="reportsCard">
        <div class="ppg-container-cols">
            <div style="grid-column: 1 / span 12;">
                @(Html.DevExtreme().Button().Text("Clear Filters").ID("clearFilterBtn").OnClick("PPG.reports.clearFilters"))
                @(Html.DevExtreme().DataGrid<ParcelPrepGov.Reports.Models.SprocModels.AdvancedDailyWarningMaster>()
                    .ID("reportsGrid")
                    .DataSource(d => d.Mvc()
                    .Controller("Reports")
                    .LoadAction(nameof(ParcelPrepGov.Web.Features.Reports.ReportsController.GetAdvancedDailyWarningData))
                    .LoadParams(new{
                        subClientNames = new JS("PPG.reports.getSelectedSubClientList"),
                        startDate = new JS("PPG.reports.getManifestStartDate"),
                        endDate = new JS("PPG.reports.getManifestEndDate")
                    }))
                    .OnDataErrorOccurred("PPG.reports.runAndExportButtonReenable")
                    .ShowBorders(true)
                    .LoadPanel(x => x.Enabled(true))
                    .Width("100%")
                    .Height(600)
                    .Sorting(sorting => sorting.Mode(GridSortingMode.Single))
                    .ShowBorders(true)
                    .ShowRowLines(true)
                    .ShowColumnLines(true)
                    .Scrolling(scrolling =>
                    {
                        scrolling.Mode(GridScrollingMode.Virtual);
                        scrolling.ColumnRenderingMode(GridColumnRenderingMode.Virtual);
                        scrolling.ShowScrollbar(ShowScrollbarMode.Always);
                    })
                    .AllowColumnResizing(true)
                    .ColumnResizingMode(ColumnResizingMode.Widget)
                    .ColumnAutoWidth(true)
                    .Columns(columns =>
                    {
                    columns.AddFor(m => m.SITE_CODE).DataType(GridColumnDataType.String).CssClass("minimal");
                    columns.AddFor(m => m.DATE_SHIPPED).DataType(GridColumnDataType.Date).CssClass("minimal").SortOrder(SortOrder.Desc).CalculateCellValue(@<text>
                                function(data) {
                                    return data.MANIFEST_DATE_STRING;
                                }
                            </text>);
                        columns.AddFor(m => m.ENTRY_UNIT_NAME).DataType(GridColumnDataType.String).CssClass("minimal");
                        columns.AddFor(m => m.ENTRY_UNIT_CSZ).DataType(GridColumnDataType.String).CssClass("minimal");
                        columns.AddFor(m => m.ENTRY_UNIT_TYPE).DataType(GridColumnDataType.String).CssClass("minimal");
                        columns.AddFor(m => m.PCS_NO_SCAN).DataType(GridColumnDataType.Number).CssClass("minimal");
                        columns.AddFor(m => m.TOTAL_PCS).DataType(GridColumnDataType.Number).CssClass("minimal");
                        columns.AddFor(m => m.PCT_NO_SCAN).DataType(GridColumnDataType.Number).Format(Format.Percent).CssClass("minimal").CalculateCellValue(@<text>
                                    function(data) {
                                        return PPG.reports.formatPercent(data.PCT_NO_SCAN, 2);
                                    }
                                </text>).CalculateSortValue("PCT_NO_SCAN");
                    }).MasterDetail(md =>

                md.Enabled(true)
                        .Template(new TemplateName("gridContainer-details-tab1-gridTemplate")))
                )

                @using (Html.DevExtreme().NamedTemplate("gridContainer-details-tab1-gridTemplate"))
                {
                    @(Html.DevExtreme().DataGrid<ParcelPrepGov.Reports.Models.SprocModels.AdvancedDailyWarningDetail>()
                            .ColumnAutoWidth(true)
                            .AllowColumnResizing(true)
                            .ColumnResizingMode(ColumnResizingMode.Widget)
                            .ShowBorders(true)
                            .RowAlternationEnabled(true)
                            .Width("100%")
                            .Height(300)
                            .Scrolling(scrolling =>
                            {
                                scrolling.Mode(GridScrollingMode.Virtual);
                                scrolling.ColumnRenderingMode(GridColumnRenderingMode.Virtual);
                            })
                            .Paging(paging => paging.PageSize(5))
                            .Pager(pager =>
                            {
                                pager.ShowPageSizeSelector(true);
                                pager.AllowedPageSizes(new[] { 5, 10, 20, 50, 100 });
                                pager.ShowInfo(true);
                             })
                            .OnCellPrepared("cell_prepared")
                            .Columns(columns =>
                            {
                            columns.AddFor(m => m.DATE_SHIPPED).DataType(GridColumnDataType.Date).CssClass("minimal").CalculateCellValue(@<text>
                                function(data) {
                                    return data.MANIFEST_DATE_STRING;
                                }
                            </text>);
                            columns.AddFor(m => m.PACKAGE_ID).DataType(GridColumnDataType.String).CssClass("minimal").CalculateCellValue(@<text>
                                    function(data) {
                                        return PPG.reports.formatPackageHyperLink(data);
                                    }
                                </text>);
                            columns.AddFor(m => m.TRACKING_NUMBER).DataType(GridColumnDataType.String).CssClass("minimal").CalculateCellValue(@<text>
                                    function(data) {
                                        return PPG.reports.formatTrackingHyperLink(data);
                                    }
                                </text>);
                            columns.AddFor(m => m.PRODUCT).DataType(GridColumnDataType.String).CssClass("minimal");
                            columns.AddFor(m => m.DEST_ZIP).DataType(GridColumnDataType.String).CssClass("minimal");
                            columns.AddFor(m => m.ENTRY_UNIT_NAME).DataType(GridColumnDataType.String).CssClass("minimal");
                            columns.AddFor(m => m.ENTRY_UNIT_CSZ).DataType(GridColumnDataType.String).CssClass("minimal");
                            columns.AddFor(m => m.LAST_KNOWN_DESC).DataType(GridColumnDataType.String).CssClass("minimal");
                            columns.AddFor(m => m.LAST_KNOWN_LOCATION).DataType(GridColumnDataType.String).CssClass("minimal");
                            columns.AddFor(m => m.LAST_KNOWN_ZIP).DataType(GridColumnDataType.String).CssClass("minimal");
                            columns.AddFor(m => m.LAST_KNOWN_DATE).DataType(GridColumnDataType.Date).CssClass("minimal").SortOrder(SortOrder.Desc).CalculateCellValue(@<text>
                                function(data) {
                                    return data.LAST_KNOWN_DATE_STRING;
                                }
                            </text>);
                            })
                            .DataSource(d => d.Mvc()
                            .Controller("Reports")
                            .LoadAction(nameof(ParcelPrepGov.Web.Features.Reports.ReportsController.GetAdvancedDailyWarningDetailBySingleId))
                            .LoadParams(new
                            {
                                subClientNames = new JS("PPG.reports.getSelectedSubClientList"),
                                manifestDate = new JS("data.DATE_SHIPPED"),
                                id = new JS("data.ID")
                            }))
                    )
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/ppg/ppg.reports-reports.bundle.min.js" asp-append-version="true"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function documentReady() {
            this.removeEventListener('DOMContentLoaded', documentReady);
            PPG.reports.init('Advanced Daily Warning');
        });

        function gridBox_valueChanged(e) {
            var $dataGrid = $("#embedded-datagrid");
            if ($dataGrid.length) {
                var dataGrid = $dataGrid.dxDataGrid("instance");
                dataGrid.selectRows(e.value, false);
                PPG.reports.onSubClientListChanged(e);
            }
        }

        function cell_prepared(options) {
            options.cellElement.html(options.value);
        }
    </script>
}
