@{
    ViewData["Title"] = "Daily Revenue File Report";

}

<h2 class="content-block">Reporting<i class="dx-icon dx-icon-spinright"></i>Daily Revenue File Report</h2>
<p class="page-desc">
    Daily Revenue File Report
</p>


<div class="content-block">
    <div class="dx-card">
        <div class="ppg-container-cols">
            <div class="dx-col-2">
                <label>Customer - Location</label>
                @(Html.DevExtreme().DropDownBox()
                    .DataSource(d => d.Mvc()
                        .Controller("Common")
                        .LoadAction("GetSubClientSelectBoxData")
                        .LoadMode(DataSourceLoadMode.Raw)
                        .Key("Name")
                    )
                    .Placeholder("Choose Customer\\Location")
                    .Width(280)
                    .ShowClearButton(true)
                    .DisplayExpr("Description")
                    .ContentTemplate(new TemplateName("EmbeddedDataGridMultiple"))
                    .StylingMode(EditorStylingMode.Underlined)
                    .ValueExpr("Name")
                    .OnValueChanged("gridBox_valueChanged")
                 )
                @* multi dropdown grid*@
                @using (Html.DevExtreme().NamedTemplate("EmbeddedDataGridMultiple"))
                {
                    @(Html.DevExtreme().DataGrid()
                        .ID("embedded-datagrid")
                        .DataSource(new JS(@"component.getDataSource()"))
                        .Columns(columns =>
                        {
                            columns.Add().DataField("Name");
                        })
                        .Selection(s => s.Mode(SelectionMode.Multiple))
                        .Height(300)
                        .SelectedRowKeys(new JS(@"component.option(""value"")"))
                        .OnSelectionChanged(@<text>
                            function(selectedItems){
                                var keys = selectedItems.selectedRowKeys;
                                component.option("value", keys);
                            }
                        </text>)
                        )
                }
            </div>
            <div class="dx-col-2">
                <label>Manifest Date: </label>

                @(Html.DevExtreme().DateBox()
        .ID("manifestDate")
                .Name("ManifestDate")
                .OnValueChanged("PPG.reports.onManifestDateChanged")
                .Type(DateBoxType.Date)
                .Max(DateTime.Today)
                .Value(DateTime.Now)
                .Width(250)

    )
            </div>
            <div class="dx-col-1" style="text-align:right">
                @(Html.DevExtreme().Button()
		        .ID("runReportButton")
				.Text("Run Report")
                .ValidationGroup("SubClientName")
				.OnClick("PPG.reports.onRunDailyRevenue")

    )
            </div>
            <div class="dx-col-1" style="text-align:right">
                @(Html.DevExtreme().Button()
                    .ID("btnExport")
                    .Text("Export")
                    .Disabled(false)
                    .Icon("xlsxfile")
                    .ValidationGroup("SubClientName")
                    .OnClick("PPG.reports.dailyRevenueExportFile")
                )
            </div>
        </div>
        </div>
    </div>



    <div class="content-block">
        <div class="dx-card" id="reportsCard">
            <div>
                <div style="grid-column: 1 / span 12; height: 100%; width: 100%;">
                    @(Html.DevExtreme().Button().Text("Clear Filters").ID("clearFilterBtn").OnClick("PPG.reports.clearFilters"))
                    @(Html.DevExtreme().DataGrid<ParcelPrepGov.Reports.Models.SprocModels.DailyRevenueFile>()
                    .ID("reportsGrid")
                    .DataSource(d => d.Mvc()
                    .Controller("Reports")
                    .LoadAction(nameof(ParcelPrepGov.Web.Features.Reports.ReportsController.GetDailyRevenueFile))
                    .LoadParams(new { subClientNames = new JS("PPG.reports.getSelectedSubClientList"), manifestDate = new JS("PPG.reports.getManifestDate") })
                    )
                    .OnDataErrorOccurred("PPG.reports.runAndExportButtonReenable")
                    .Width("100%")
                    .OnCellPrepared("cell_prepared")
                    .ShowBorders(true)
                    .ShowRowLines(true)
                    .ShowColumnLines(true)
                    .LoadPanel(lp => lp.Enabled(true))
                    .Scrolling(scrolling =>
                    {
                        scrolling.Mode(GridScrollingMode.Standard);
                        scrolling.ColumnRenderingMode(GridColumnRenderingMode.Standard);
                        scrolling.ShowScrollbar(ShowScrollbarMode.Always);
                    })
                    .AllowColumnResizing(true)
                    .ColumnResizingMode(ColumnResizingMode.Widget)
                    .ColumnAutoWidth(true)
                    .Columns(columns =>
                    {
                    columns.AddFor(m => m.CUST_NAME).DataType(GridColumnDataType.String).CssClass("minimal");
                    columns.AddFor(m => m.MANIFEST_DATE).DataType(GridColumnDataType.Date).CssClass("minimal").SortOrder(SortOrder.Desc).CalculateCellValue(@<text>
                        function(data) {
                            return data.MANIFEST_DATE_STRING;
                        }
                    </text>);
                    columns.AddFor(m => m.PRODUCT).DataType(GridColumnDataType.String).CssClass("minimal");
                    columns.AddFor(m => m.TRACKING_TYPE).DataType(GridColumnDataType.String).CssClass("minimal");
                    columns.AddFor(m => m.PIECES).DataType(GridColumnDataType.Number).CssClass("minimal");
                    columns.AddFor(m => m.ASSESSORIAL_COST).DataType(GridColumnDataType.Number).CssClass("minimal");
                    columns.AddFor(m => m.COST).DataType(GridColumnDataType.Number).CssClass("minimal");
                    columns.AddFor(m => m.TOTAL_COST).DataType(GridColumnDataType.Number).CssClass("minimal");
                    })
                    .Paging(paging => paging.Enabled(false))
                )
                </div>
            </div>
        </div>
    </div>
    @section Scripts {
        <script src="~/js/ppg/ppg.reports-reports.bundle.min.js" asp-append-version="true"></script>
        <script>
            document.addEventListener('DOMContentLoaded', function documentReady() {
                this.removeEventListener('DOMContentLoaded', documentReady);
                PPG.reports.init('Daily Revenue File');
            });

            var dataGrid,
                taskIdEditor;

            function gridBox_valueChanged(e) {
                var $dataGrid = $("#embedded-datagrid");
                if ($dataGrid.length) {
                    var dataGrid = $dataGrid.dxDataGrid("instance");
                    dataGrid.selectRows(e.value, false);
                    PPG.reports.onSubClientListChanged(e);
                }
            }

            function cell_prepared(options) {
                options.cellElement.html(options.value);
            }
        </script>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.3.1/exceljs.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.8/FileSaver.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.4.0/polyfill.min.js"></script>


    }
