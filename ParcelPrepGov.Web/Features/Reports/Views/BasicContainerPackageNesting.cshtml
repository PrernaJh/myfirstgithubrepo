@{
    ViewData["Title"] = "Basic Container Package Nesting Report";

}


<h2 class="content-block">Reporting<i class="dx-icon dx-icon-spinright"></i>Basic Container Package Nesting</h2>
<p class="page-desc">
    Basic Container Package Nesting
</p>

<div class="content-block">
    <div class="dx-card">
        <div class="ppg-container-cols">
            <div class="dx-col-2">
                <label>Site</label>
                @(Html.DevExtreme().SelectBox()
                .ID("siteName")
                .Name("SiteName")
                .DataSource(d => d.Mvc().Controller("Common").LoadAction("GetSiteSelectBoxData"))
                .Placeholder("Name")
                .DisplayExpr("Description")
                .DeferRendering(false)
                .ValueExpr("Name")
                .OnValueChanged("PPG.reports.onSiteValueChanged")
                .Width(280))
            </div>
            <div class="dx-col-2">
                <label>Manifest From Date</label>
                @(Html.DevExtreme().DateBox()
                .ID("manifestStartDate")
                .Name("ManifestStartDate")
                .OnValueChanged("PPG.reports.onManifestDateChanged")
                .Type(DateBoxType.Date)
                .Value(DateTime.Now)
                .Width(170)
                )
            </div>
            <div class="dx-col-1" style="text-align:right">
                @(Html.DevExtreme().Button()
		                .ID("runReportButton")
				        .Text("Run Report")
                        .ValidationGroup("SubClientName")
				        .OnClick("PPG.reports.onRunBasicContainerPackageNestingReport")
                         )
            </div>
            <div class="dx-col-1" style="text-align:right">
                @(Html.DevExtreme().Button()
                    .ID("btnExport")
                    .Text("Export")
                    .Disabled(false)
                    .Icon("xlsxfile")
                    .ValidationGroup("SubClientName")
                    .OnClick("PPG.reports.basicContainerPackageNestingExportFile")
                    )
            </div>
        </div>
    </div>
</div>
<div class="content-block">
    <div class="dx-card" id="reportsCard">
        <div class="ppg-container-cols">
            <div style="grid-column: 1 / span 12;">
                @(Html.DevExtreme().Button().Text("Clear Filters").ID("clearFilterBtn").OnClick("PPG.reports.clearFilters"))
                <br />
                <br />
                @(Html.DevExtreme().DataGrid<ParcelPrepGov.Reports.Models.SprocModels.BasicContainerPackageNesting>()
                    .ID("reportsGrid")
                    .DataSource(d => d.Mvc()
                    .Controller("Reports")
                    .LoadAction(nameof(ParcelPrepGov.Web.Features.Reports.ReportsController.GetBasicContainerPackageNesting))
                    .LoadParams(new {
                        siteName = new JS("PPG.reports.getSelectedSite"),
                        manifestDate = new JS("PPG.reports.getManifestDate")
                    }))
                    .OnDataErrorOccurred("PPG.reports.runAndExportButtonReenable")
                    .ShowBorders(true)
                    .AllowColumnResizing(true)
                    .LoadPanel(x => x.Enabled(true))
                    .Width("100%")
                    .HeaderFilter(h => h.Visible(true).AllowSearch(true))
                    .Height(600)
                    .ShowBorders(true)
                    .ShowRowLines(true)
                    .ShowColumnLines(true)
                    .Sorting(sorting => sorting.Mode(GridSortingMode.Single))
                    .LoadPanel(lp => lp.Enabled(true))
                    .Scrolling(scrolling =>
                    {
                        scrolling.Mode(GridScrollingMode.Virtual);
                        scrolling.ColumnRenderingMode(GridColumnRenderingMode.Virtual);
                        scrolling.ShowScrollbar(ShowScrollbarMode.Always);
                    })
                    .OnCellPrepared("cell_prepared")
                    .ColumnResizingMode(ColumnResizingMode.Widget)
                    .ColumnAutoWidth(true)
                    .Columns(columns =>
                    {
                        columns.AddFor(m => m.SITE).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(false);
                        columns.AddFor(m => m.CUSTOMER).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(true);
                        columns.AddFor(m => m.BINCODE).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(true);
                        columns.AddFor(m => m.DESTINATION).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(false);
                        columns.AddFor(m => m.CONTAINER_ID).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(false);
                        columns.AddFor(m => m.CONT_BARCODE).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(false);
                        columns.AddFor(m => m.CONT_CARRIER).DataType(GridColumnDataType.String).CssClass("minimal");
                        columns.AddFor(m => m.CONT_METHOD).DataType(GridColumnDataType.String).CssClass("minimal");
                        columns.AddFor(m => m.CONT_TYPE).DataType(GridColumnDataType.String).CssClass("minimal");
                        columns.AddFor(m => m.PACKAGE_ID).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(false)
                            .CalculateCellValue(@<text>
                                    function(data) {
                                        return PPG.reports.formatPackageHyperLink(data);
                                    }
                                </text>);
                        columns.AddFor(m => m.TRACKING_NUMBER).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(false)
                            .CalculateCellValue(@<text>
                                    function(data) {
                                        return PPG.reports.formatTrackingHyperLink(data);
                                    }
                                </text>);
                        columns.AddFor(m => m.PKG_CARRIER).DataType(GridColumnDataType.String).CssClass("minimal");
                        columns.AddFor(m => m.PKG_SHIPPINGMETHOD).DataType(GridColumnDataType.String).CssClass("minimal");
                        columns.AddFor(m => m.PKG_PROCESSED_DATE).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(false);
                            if (User.IsSubClientWebAdministrator() || User.IsSubClientWebUser() 
                            || User.IsClientWebAdministrator() || User.IsClientWebUser()
                            || User.IsCustomerService())
                            {
                                // show nothing
                            }
                            else
                            {
                                columns.AddFor(m => m.PKG_PROCESSED_BY).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(false);
                            }
                        columns.AddFor(m => m.CONT_OPENED_DATE).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(false);
                        
                         if (User.IsSubClientWebAdministrator() || User.IsSubClientWebUser() 
                            || User.IsClientWebAdministrator() || User.IsClientWebUser()
                            || User.IsCustomerService())
                            {
                                // show nothing
                            }
                            else
                            {
                                columns.AddFor(m => m.OPENED_BY_NAME).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(false);
                            }               
                        columns.AddFor(m => m.CONT_CLOSED_DATE).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(false);                        
                         if (User.IsSubClientWebAdministrator() || User.IsSubClientWebUser() 
                            || User.IsClientWebAdministrator() || User.IsClientWebUser()
                            || User.IsCustomerService())
                            {
                                // show nothing
                            }
                            else
                            {
                                columns.AddFor(m => m.CLOSED_BY_NAME).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(false);
                            } 
                         columns.AddFor(x=>x.EVENT_TYPE).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(false);
                         columns.AddFor(x=>x.MACHINE_ID).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(false);
                         columns.AddFor(x=>x.DESTINATION_ZIP).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(false);
                         columns.AddFor(x=>x.SITE_KEY).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(false);
                         columns.AddFor(x=>x.SINGLE_BAG_SORT).DataType(GridColumnDataType.String).CssClass("minimal").AllowFiltering(true);
                    })
                    )
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/ppg/ppg.reports-reports.bundle.min.js" asp-append-version="true"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function documentReady() {
            this.removeEventListener('DOMContentLoaded', documentReady);
            PPG.reports.init('Basic Container Package Nesting Report');
        });

        var dataGrid,
            taskIdEditor;

        function gridBox_valueChanged(e) {
            var $dataGrid = $("#embedded-datagrid");
            if ($dataGrid.length) {
                var dataGrid = $dataGrid.dxDataGrid("instance");
                dataGrid.selectRows(e.value, false);
                PPG.reports.onSubClientListChanged(e);
            }
        }

        function cell_prepared(options) {
            options.cellElement.html(options.value);
        }
    </script>

}
