@{
    ViewData["Title"] = "Weekly Invoice File Report";

}

<h2 class="content-block">Reporting<i class="dx-icon dx-icon-spinright"></i>Weekly Invoice File Report</h2>
<p class="page-desc">
    Weekly Invoice File Report
</p>
<div class="content-block">
    <div class="dx-card">
        <div class="ppg-container-cols">
            <div class="dx-col-2">
                <label>Customer - Location</label>
                @(Html.DevExtreme().DropDownBox()
                    .DataSource(d => d.Mvc()
                        .Controller("Common")
                        .LoadAction("GetSubClientSelectBoxData")
                        .LoadMode(DataSourceLoadMode.Raw)
                        .Key("Name")
                    )
                    .Placeholder("Choose Customer\\Location")
                    .Width(280)
                    .ShowClearButton(true)
                    .DisplayExpr("Description")
                    .ContentTemplate(new TemplateName("EmbeddedDataGridMultiple"))
                    .StylingMode(EditorStylingMode.Underlined)
                    .ValueExpr("Name")
                    .OnValueChanged("gridBox_valueChanged")
                 )
                @* multi dropdown grid*@
                @using (Html.DevExtreme().NamedTemplate("EmbeddedDataGridMultiple"))
                {
                    @(Html.DevExtreme().DataGrid()
                        .ID("embedded-datagrid")
                        .DataSource(new JS(@"component.getDataSource()"))
                        .Columns(columns =>
                        {
                            columns.Add().DataField("Name");
                        })
                        .Selection(s => s.Mode(SelectionMode.Multiple))
                        .Height(300)
                        .SelectedRowKeys(new JS(@"component.option(""value"")"))
                        .OnSelectionChanged(@<text>
                            function(selectedItems){
                                var keys = selectedItems.selectedRowKeys;
                                component.option("value", keys);
                            }
                        </text>)
                        )
                }
            </div>
            <div class="dx-col-2">
                <label>Manifest From Date</label>

                @(Html.DevExtreme().DateBox()
                .ID("manifestStartDate")
                .Name("ManifestStartDate")
                .OnValueChanged("PPG.reports.onManifestStartDateChanged")
                .Type(DateBoxType.Date)
                .Value(DateTime.Now.AddDays(-6))
                .Width(170)
                .Min(DateTime.Now.AddDays(-180))
                .Max(DateTime.Now)
                )
            </div>
            <div class="dx-col-2">
                <label>Manifest To Date</label>
                @(Html.DevExtreme().DateBox()
                .ID("manifestEndDate")
                .Name("ManifestEndDate")
                .OnValueChanged("PPG.reports.onManifestEndDateChanged")
                .Type(DateBoxType.Date)
                .Value(DateTime.Now)
                .Width(170)
                .Min(DateTime.Now.AddDays(-180))
                .Max(DateTime.Now)
                )

            </div>
            <div class="dx-col-1" style="text-align:right">
                @(Html.DevExtreme().Button()
		        .ID("runReportButton")
				.Text("Run Report")
                .ValidationGroup("SubClientName")
				.OnClick("PPG.reports.onRunWeeklyInvoiceReport")

    )
            </div>
            <div class="dx-col-1" style="text-align:right">
                @(Html.DevExtreme().Button()
                    .ID("btnExport")
                    .Text("Export")
                    .Disabled(false)
                    .Icon("xlsxfile")
                    .ValidationGroup("SubClientName")
                    .OnClick("PPG.reports.weeklyInvoiceExportFile")
                )
            </div>
        </div>
    </div>
</div>



<div class="content-block">
    <div class="dx-card" id="reportsCard">
        <div>
            <div style="grid-column: 1 / span 12; height: 100%; width: 100%;">
                @(Html.DevExtreme().Button().Text("Clear Filters").ID("clearFilterBtn").OnClick("PPG.reports.clearFilters"))
                @(Html.DevExtreme().DataGrid<ParcelPrepGov.Reports.Models.SprocModels.WeeklyInvoiceFile>()
                .ID("reportsGrid")
                .DataSource(d => d.Mvc()
                .Controller("Reports")
                .LoadAction(nameof(ParcelPrepGov.Web.Features.Reports.ReportsController.GetWeeklyInvoiceFile))
                .LoadParams(new {
                    subClientNames = new JS("PPG.reports.getSelectedSubClientList"),
                    startDate = new JS("PPG.reports.getManifestStartDate"),
                    endDate = new JS("PPG.reports.getManifestEndDate")
                })
        .Key("PACKAGE_ID"))
        .OnDataErrorOccurred("PPG.reports.runAndExportButtonReenable")
        .Width("100%")
        .ShowBorders(true)
        .ShowRowLines(true)
        .ShowColumnLines(true)
        .LoadPanel(lp => lp.Enabled(true))
        .Scrolling(scrolling =>
                        {
                            scrolling.Mode(GridScrollingMode.Virtual);
                            scrolling.ColumnRenderingMode(GridColumnRenderingMode.Virtual);
                            scrolling.ShowScrollbar(ShowScrollbarMode.Always);
                        })
        .AllowColumnResizing(true)
        .ColumnResizingMode(ColumnResizingMode.Widget)
        .ColumnAutoWidth(true)
        .Columns(columns =>
        {
            columns.AddFor(m => m.SUBCLIENT).DataType(GridColumnDataType.String).CssClass("minimal");
            columns.AddFor(m => m.BILLING_DATE).DataType(GridColumnDataType.Date).CssClass("minimal").Format(Format.ShortDate).SortOrder(SortOrder.Desc);
            columns.AddFor(m => m.BILLING_REFERENCE).DataType(GridColumnDataType.String).CssClass("minimal");
            columns.AddFor(m => m.BILLING_PRODUCT).DataType(GridColumnDataType.String).CssClass("minimal");
            //columns.AddFor(m => m.MARKUP_DESC).DataType(GridColumnDataType.String);
            columns.AddFor(m => m.BILLING_WEIGHT).DataType(GridColumnDataType.Number).CssClass("minimal");
            columns.AddFor(m => m.BILLING_COST).DataType(GridColumnDataType.Number).CssClass("minimal");
            columns.AddFor(m => m.PACKAGE_ID).DataType(GridColumnDataType.String).CssClass("minimal")
                .CellTemplate(@<text>
                            <div>
                                <a href="/PackageSearch?packageId=<%- value %>" Target=_blank><%- value %></a>
                            </div>
                </text>);
            columns.AddFor(m => m.TRACKINGNUMBER).CssClass("minimal")
                .CellTemplate(@<text>
                                <div>
                                    <a href="https://tools.usps.com/go/TrackConfirmAction?qtc_tLabels1=<%- value %>" Target=_blank><%- value %></a>
                                </div>
                    </text>);
            columns.AddFor(m => m.Weight).DataType(GridColumnDataType.Number).CssClass("minimal");
            columns.AddFor(m => m.TOTAL_CUST).DataType(GridColumnDataType.Number).CssClass("minimal");
             })
                )
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script src="~/js/ppg/ppg.reports-reports.bundle.min.js" asp-append-version="true"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function documentReady() {
            this.removeEventListener('DOMContentLoaded', documentReady);
            PPG.reports.init('Weekly Invoice File');
        });

        var dataGrid,
            taskIdEditor;

    </script>

    <script>
        function gridBox_valueChanged(e) {
            var $dataGrid = $("#embedded-datagrid");
            if ($dataGrid.length) {
                var dataGrid = $dataGrid.dxDataGrid("instance");
                dataGrid.selectRows(e.value, false);
                PPG.reports.onSubClientListChanged(e);
            }
        }

    </script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/3.3.1/exceljs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.8/FileSaver.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-polyfill/7.4.0/polyfill.min.js"></script>


}
