@{
    ViewData["Title"] = "Postal Performance Summary";

}


<h2 class="content-block">Reporting<i class="dx-icon dx-icon-spinright"></i>Postal Performance Summary</h2>
<p class="page-desc">
    Postal Performance Summary
</p>

<div class="content-block">
    <div class="dx-card">
        <div class="ppg-container-cols">
            <div class="dx-col-2">
                <label>Customer - Location</label>
                @(Html.DevExtreme().DropDownBox()
                    .DataSource(d => d.Mvc()
                        .Controller("Common")
                        .LoadAction("GetSubClientSelectBoxData")
                        .LoadMode(DataSourceLoadMode.Raw)
                        .Key("Name")
                    )
                    .Placeholder("Choose Customer\\Location")
                    .Width(280)
                    .ShowClearButton(true)
                    .DisplayExpr("Description")
                    .ContentTemplate(new TemplateName("EmbeddedDataGridMultiple"))
                    .StylingMode(EditorStylingMode.Underlined)
                    .ValueExpr("Name")
                    .OnValueChanged("gridBox_valueChanged")
                 )
                @* multi dropdown grid*@
                @using (Html.DevExtreme().NamedTemplate("EmbeddedDataGridMultiple"))
                {
                    @(Html.DevExtreme().DataGrid()
                        .ID("embedded-datagrid")
                        .DataSource(new JS(@"component.getDataSource()"))
                        .Columns(columns =>
                        {
                            columns.Add().DataField("Name");
                        })
                        .Selection(s => s.Mode(SelectionMode.Multiple))
                        .Height(300)
                        .SelectedRowKeys(new JS(@"component.option(""value"")"))
                        .OnSelectionChanged(@<text>
                            function(selectedItems){
                                var keys = selectedItems.selectedRowKeys;
                                component.option("value", keys);
                            }
                        </text>)
                    )
                }
            </div>
            <div class="dx-col-2">
                <label>Manifest From Date</label>

                @(Html.DevExtreme().DateBox()
                .ID("manifestStartDate")
                .Name("ManifestStartDate")
                .OnValueChanged("PPG.reports.onManifestStartDateChanged")
                .Type(DateBoxType.Date)
                .Value(DateTime.Now.AddDays(-6))
                .Width(170)
                .Min(DateTime.Now.AddDays(-180))
                .Max(DateTime.Now)
                )
            </div>
            <div class="dx-col-2">
                <label>Manifest To Date</label>
                @(Html.DevExtreme().DateBox()
                .ID("manifestEndDate")
                .Name("ManifestEndDate")
                .OnValueChanged("PPG.reports.onManifestEndDateChanged")
                .Type(DateBoxType.Date)
                .Value(DateTime.Now)
                .Width(170)
                .Min(DateTime.Now.AddDays(-180))
                .Max(DateTime.Now)
                )

            </div>
            <div class="dx-col-1" style="text-align:right">
                @(Html.DevExtreme().Button()
		        .ID("runReportButton")
				.Text("Run Report")
                .ValidationGroup("SubClientName")
				.OnClick("PPG.reports.onRunPostPerformanceSummaryReport")

    )
            </div>
            <div class="dx-col-1" style="text-align:right">
                @(Html.DevExtreme().Button()
                    .ID("btnExport")
                    .Text("Export")
                    .Disabled(false)
                    .Icon("xlsxfile")
                    .ValidationGroup("SubClientName")
                    .OnClick("PPG.reports.postalPerformanceSummaryExportFile")
                )
            </div>

        </div>
    </div>
</div>
<div class="content-block">
    <div class="dx-card" id="reportsCard">
        <div class="ppg-container-cols">
            <div style="grid-column: 1 / span 12;">
                @(Html.DevExtreme().Button().Text("Clear Filters").ID("clearFilterBtn").OnClick("PPG.reports.clearFilters"))
                @(Html.DevExtreme().DataGrid<ParcelPrepGov.Reports.Models.SprocModels.PostalPerformanceSummary>()
                    .ID("reportsGrid")
                    .DataSource(d => d.Mvc()
                    .Controller("Reports")
                    .LoadAction(nameof(ParcelPrepGov.Web.Features.Reports.ReportsController.GetPostalPerformanceSummaryMaster))
                    .LoadParams(new { subClientNames = new JS("PPG.reports.getSelectedSubClientList")
                                    ,startDate = new JS("PPG.reports.getManifestStartDate")
                                    ,endDate= new JS("PPG.reports.getManifestEndDate")}))
                    .ShowBorders(true)
                    .OnDataErrorOccurred("PPG.reports.runAndExportButtonReenable")
                    .Width("100%")
                    .HeaderFilter(h => h.Visible(true).AllowSearch(true))
                    .Height(600)
                    .ShowBorders(true)
                    .ShowRowLines(true)
                    .ShowColumnLines(true)
                    .Sorting(sorting => sorting.Mode(GridSortingMode.Single))
                    .LoadPanel(lp => lp.Enabled(true))
                    .Scrolling(scrolling =>
                    {
                        scrolling.Mode(GridScrollingMode.Virtual);
                        scrolling.ColumnRenderingMode(GridColumnRenderingMode.Virtual);
                        scrolling.ShowScrollbar(ShowScrollbarMode.Always);
                    })
                    .AllowColumnResizing(true)
                    .ColumnResizingMode(ColumnResizingMode.Widget)
                    .ColumnAutoWidth(true)
                    .Columns(columns =>
                    {
                        columns.AddFor(m => m.ENTRY_UNIT_TYPE).DataType(GridColumnDataType.String).CssClass("minimal");
                        columns.AddFor(m => m.USPS_PRODUCT).DataType(GridColumnDataType.String).CssClass("minimal");
                        columns.AddFor(m => m.USPS_AREA).DataType(GridColumnDataType.String).CssClass("minimal");
                        columns.AddFor(m => m.ENTRY_UNIT_NAME).DataType(GridColumnDataType.String).CssClass("minimal");
                        columns.AddFor(m => m.ENTRY_UNIT_CSZ).DataType(GridColumnDataType.String).CssClass("minimal");
                        columns.AddFor(m => m.TOTAL_PCS).AllowFiltering(false).DataType(GridColumnDataType.Number).CssClass("minimal");
                        columns.AddFor(m => m.TOTAL_PCS_STC).AllowFiltering(false).DataType(GridColumnDataType.Number).CssClass("minimal");
                        columns.AddFor(m => m.TOTAL_PCS_NO_STC).AllowFiltering(false).DataType(GridColumnDataType.Number).CssClass("minimal");
                        columns.AddFor(m => m.STC_SCAN_PCT).AllowFiltering(false).DataType(GridColumnDataType.Number).Format(Format.Percent).CssClass("minimal").CalculateCellValue(@<text>
                                    function(data) {
                                        return PPG.reports.formatPercent(data.STC_SCAN_PCT, 2);
                                    }
                                </text>).CalculateSortValue("STC_SCAN_PCT");
                    columns.AddFor(m => m.AVG_DEL_DAYS).AllowFiltering(false).DataType(GridColumnDataType.Number).CssClass("minimal");
                    columns.AddFor(m => m.DAY0_PCS).AllowFiltering(false).DataType(GridColumnDataType.Number).CssClass("minimal");
                    columns.AddFor(m => m.DAY0_PCT).AllowFiltering(false).DataType(GridColumnDataType.Number).Format(Format.Percent).CssClass("minimal").CalculateCellValue(@<text>
                                    function(data) {
                                        return PPG.reports.formatPercent(data.DAY0_PCT, 2);
                                    }
                                </text>).CalculateSortValue("DAY0_PCT");
                    columns.AddFor(m => m.DAY1_PCS).AllowFiltering(false).DataType(GridColumnDataType.Number).CssClass("minimal");
                    columns.AddFor(m => m.DAY1_PCT).AllowFiltering(false).DataType(GridColumnDataType.Number).Format(Format.Percent).CssClass("minimal").CalculateCellValue(@<text>
                                    function(data) {
                                        return PPG.reports.formatPercent(data.DAY1_PCT, 2);
                                    }
                                </text>).CalculateSortValue("DAY1_PCT");
                    columns.AddFor(m => m.DAY2_PCS).AllowFiltering(false).DataType(GridColumnDataType.Number).CssClass("minimal");
                    columns.AddFor(m => m.DAY2_PCT).AllowFiltering(false).DataType(GridColumnDataType.Number).Format(Format.Percent).CssClass("minimal").CalculateCellValue(@<text>
                                    function(data) {
                                        return PPG.reports.formatPercent(data.DAY2_PCT, 2);
                                    }
                                </text>).CalculateSortValue("DAY2_PCT");
                    columns.AddFor(m => m.DAY3_PCS).AllowFiltering(false).DataType(GridColumnDataType.Number).CssClass("minimal");
                    columns.AddFor(m => m.DAY3_PCT).AllowFiltering(false).DataType(GridColumnDataType.Number).Format(Format.Percent).CssClass("minimal").CalculateCellValue(@<text>
                                    function(data) {
                                        return PPG.reports.formatPercent(data.DAY3_PCT, 2);
                                    }
                                </text>).CalculateSortValue("DAY3_PCT");
                    columns.AddFor(m => m.DAY4_PCS).AllowFiltering(false).DataType(GridColumnDataType.Number).CssClass("minimal");
                    columns.AddFor(m => m.DAY4_PCT).AllowFiltering(false).DataType(GridColumnDataType.Number).Format(Format.Percent).CssClass("minimal").CalculateCellValue(@<text>
                                    function(data) {
                                        return PPG.reports.formatPercent(data.DAY4_PCT, 2);
                                    }
                                </text>).CalculateSortValue("DAY4_PCT");
                    columns.AddFor(m => m.DAY5_PCS).AllowFiltering(false).DataType(GridColumnDataType.Number).CssClass("minimal");
                    columns.AddFor(m => m.DAY5_PCT).AllowFiltering(false).DataType(GridColumnDataType.Number).Format(Format.Percent).CssClass("minimal").CalculateCellValue(@<text>
                                    function(data) {
                                        return PPG.reports.formatPercent(data.DAY5_PCT, 2);
                                    }
                                </text>).CalculateSortValue("DAY5_PCT");
                    columns.AddFor(m => m.DAY6_PCS).AllowFiltering(false).DataType(GridColumnDataType.Number).CssClass("minimal");
                    columns.AddFor(m => m.DAY6_PCT).AllowFiltering(false).DataType(GridColumnDataType.Number).Format(Format.Percent).CssClass("minimal").CalculateCellValue(@<text>
                                    function(data) {
                                        return PPG.reports.formatPercent(data.DAY6_PCT, 2);
                                    }
                                </text>).CalculateSortValue("DAY6_PCT");

                    }).Summary(s => s.TotalItems(items =>
                    {
                        items.AddFor(m => m.CUST_LOCATION).SummaryType(SummaryType.Count);
                        items.AddFor(m => m.TOTAL_PCS).SummaryType(SummaryType.Sum);
                        items.AddFor(m => m.TOTAL_PCS_STC).SummaryType(SummaryType.Sum);
                        items.AddFor(m => m.TOTAL_PCS_NO_STC).SummaryType(SummaryType.Sum);
                    }))
                    .MasterDetail(md =>
                        md.Enabled(false)
                        .Template(new TemplateName("gridContainer-details-tab1-gridTemplate")))

                )

                @using (Html.DevExtreme().NamedTemplate("gridContainer-details-tab1-gridTemplate"))
                {
                    @(Html.DevExtreme().DataGrid<ParcelPrepGov.Reports.Models.SprocModels.PostalPerformanceSummaryDetail>()
                        .ColumnAutoWidth(true)
                        .AllowColumnResizing(true)
                        .ColumnResizingMode(ColumnResizingMode.Widget)
                        .ShowBorders(true)
                        .OnCellPrepared("cell_prepared")
                        .Columns(columns =>
                        {
                            @*columns.AddFor(m => m.PostalPerformance5Digit).DataType(GridColumnDataType.String);
                            columns.AddFor(m => m.MANIFEST_DATE).DataType(GridColumnDataType.Date).SortOrder(SortOrder.Desc).CalculateCellValue(@<text>
                                function(data) {
                                    return data.MANIFEST_DATE_STRING;
                                }
                            </text>);
                            columns.AddFor(m => m.ENTRY_UNIT_NAME).DataType(GridColumnDataType.String);
                            columns.AddFor(m => m.ENTRY_UNIT_CSZ).DataType(GridColumnDataType.String);
                            columns.AddFor(m => m.ENTRY_UNIT_TYPE).DataType(GridColumnDataType.String);
                            columns.AddFor(m => m.PRODUCT).DataType(GridColumnDataType.String);
                            columns.AddFor(m => m.CARRIER).DataType(GridColumnDataType.String);;
                            columns.AddFor(m => m.TRACKING_NUMBER).DataType(GridColumnDataType.String).CssClass("minimal").CalculateCellValue(@<text>
                                    function(data) {
                                        return PPG.reports.formatTrackingHyperLink(data);
                                    }
                            </text>);*@
                        }
                        )

                        .DataSource(d => d.Mvc()
                        .Controller("Reports")
                        .LoadAction(nameof(ParcelPrepGov.Web.Features.Reports.ReportsController.GetPostalPerformanceSummaryDetailsBySingleId))
                        .LoadParams(new {
                            id = new JS("data.ID")
                        }))
                    )

                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/ppg/ppg.reports-reports.bundle.min.js" asp-append-version="true"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function documentReady() {
            this.removeEventListener('DOMContentLoaded', documentReady);
            PPG.reports.init('Postal Performance Summary');
        });

        var dataGrid,
            taskIdEditor;

        function gridBox_valueChanged(e) {
            var $dataGrid = $("#embedded-datagrid");
            if ($dataGrid.length) {
                var dataGrid = $dataGrid.dxDataGrid("instance");
                dataGrid.selectRows(e.value, false);
                PPG.reports.onSubClientListChanged(e);
            }
        }

        function cell_prepared(options) {
            options.cellElement.html(options.value);
        }

    </script>

}
