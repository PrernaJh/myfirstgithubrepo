@model ManageZoneMapsViewModel;

@{
    ViewData["Title"] = "Service Management";
}

<h2 class="content-block">Service Management <i class="dx-icon dx-icon-spinright"></i> Manage Zone Maps</h2>
<p class="page-desc">Zone Maps determine a relative distance between geographical service areas​.</p>

<div class="content-block">
    <div class="dx-card" id="manageZoneMapsCard">
        <div class="ppg-card-header-cols">
            <div style="grid-column: 1 / span 8;">
                @(Html.DevExtreme().Button()
                    .ID("upload-button").Icon("upload")
                    .OnClick("PPG.manageZoneMaps.uploadButton_onClick")
                )
                @(Html.DevExtreme().Tooltip()
                        .Target("#upload-button")
                        .Position(Position.Top)
                        .ContentTemplate("Upload")
                        .ShowEvent("mouseenter")
                        .HideEvent("mouseleave"))
            </div>
            <div style="grid-column: 9 / span 4;" class="right">
                @(Html.DevExtreme().Button()
                .ID("export-button")
                .Icon("xlsxfile")
                .Disabled(true)
                .OnClick("PPG.manageZoneMaps.exportButton_onClick"))
                @(Html.DevExtreme().Tooltip()
                    .ID("exportButtonTooltip")
                    .Target("#exportButton")
                    .Position(Position.Top)
                    .ContentTemplate("Download")
                    .ShowEvent("mouseenter")
                    .HideEvent("mouseleave"))
            </div>
        </div>
        
        @(Html.DevExtreme().DataGrid<ActiveGroupViewModel>()
            .ID("zoneMapsGrid")
            .DataSource(ds => ds.Mvc()
                .Controller("ServiceManagement")
                .LoadAction("GetZoneMaps")
                .Key("Id")
                .OnLoading("PPG.manageZoneMaps.grid_onLoading")
                .OnLoaded("PPG.manageZoneMaps.grid_onLoaded")
            )
            .LoadPanel(x => x.Enabled(false))
            .ShowColumnLines(true)
            .ShowRowLines(true)
            .ShowBorders(true)
            .LoadPanel(x => x.Enabled(true))
            .Selection(s => s.Mode(SelectionMode.Single))
            .HoverStateEnabled(true)
            .FocusedRowEnabled(true)
            .OnSelectionChanged("PPG.manageZoneMaps.grid_onSelectionChanged")
             .FilterRow(f => f.Visible(true))
            .Columns(columns => {
                columns.Add().DataField("StartDate").Caption("Start Date").DataType(GridColumnDataType.Date).Format(Format.ShortDate).SortOrder(SortOrder.Desc);
                columns.Add().DataField("Filename").Caption("File Name");
                columns.Add().DataField("UploadedBy").Caption("Upload By").Width(125);
                columns.Add().DataField("UploadDate").Caption("Upload Date\\Time").DataType(GridColumnDataType.DateTime).Format(Format.ShortDateShortTime).Width(200);
            })
                .Paging(paging => paging.PageSize(10))
                .Pager(pager =>
                {
                    pager.ShowPageSizeSelector(true);
                    pager.AllowedPageSizes(new[] { 5, 10, 20 });
                    pager.ShowInfo(true);
                })
                )
    </div>
</div>

@(Html.DevExtreme().Popup()
        .ID("uploadZones-popup")
        .Width(600)
        .Height(400)
        .ShowTitle(true)
        .Title("Upload")
        .Visible(false)
        .DragEnabled(false)
        .CloseOnOutsideClick(false)
        .ContentTemplate(new TemplateName("uploadZones-form-template"))
        .OnShowing("PPG.manageZoneMaps.popup_onShowing")
        .OnHiding("PPG.manageZoneMaps.popup_onHiding")
)

@using (Html.DevExtreme().NamedTemplate("uploadZones-form-template"))
{
    @using (Html.BeginForm("ImportZoneMaps", "ServiceManagement", FormMethod.Post, new { @id = "formZones" }))
    {
        @(Html.DevExtreme().Form<ManageZoneMapsViewModel>()
            .ID("ZoneMapsForm")
            .ColCount(2)
            .Items(groups =>
            {
                groups.AddGroup()
                .ColSpan(2)
                .ColCount(2)
                .Items(items =>
                {
                    items.AddSimpleFor(m => m.UploadFile)
                    .IsRequired(true)
                    .Template(@<text>
	                    @(Html.DevExtreme().FileUploader()
                            .ID("zoneMapsFileUploader")
                            .SelectButtonText("ZoneMaps File")
                            .LabelText("")
                            .Multiple(false)                                
                            .Name("UploadFile")
                            .Accept("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel")
                            .UploadMode(FileUploadMode.UseForm)
                                .AllowedFileExtensions(new[] { ".xls", ".xlsx" })
                            .OnValueChanged("PPG.manageZoneMaps.fileUploader_onValueChanged")
                            )
	                    </text>);

                    items.AddSimpleFor(m => m.StartDate)
                    .IsRequired(true)
                    .Template(@<text>
	                    @(Html.DevExtreme()
                            .DateBoxFor(m => m.StartDate)
                            .Placeholder("")
                            .PickerType(DateBoxPickerType.Rollers)
                            .ID("zoneMapsDateBox")
                            .OnInitialized("PPG.manageZoneMaps.dateBox_onInitialized")
                            .OnValueChanged("PPG.manageZoneMaps.dateBox_onValueChanged")
                            )
	                    </text>);
                });

                groups.AddGroup()
                .ColSpan(2)
                .ColCount(2)
                .Items(items =>
                {
                    items.AddButton()
                        .ButtonOptions(b =>
                            b
                            .Text("Cancel")
                            .Type(ButtonType.Normal)
                            .UseSubmitBehavior(false)
                            .OnClick("PPG.manageZoneMaps.cancelZonesFormButton_onClick")
                        );

                    items.AddButton()
                        .ButtonOptions(b =>
                            b
                            .Text("Upload")
                            .Type(ButtonType.Success)
                            .UseSubmitBehavior(false)
                            .OnClick("PPG.manageZoneMaps.importZonesFormButton_onClick")
                        );
                });
            })
        )
    }
}


@(Html.DevExtreme().DataGrid<IEnumerable<ZoneMapViewModel>>()
    .ID("exportGrid")
    .Export(e => e.Enabled(true).AllowExportSelectedData(false))
    .OnExporting("PPG.manageZoneMaps.exportGrid_onExporting")
    .Visible(false))



@section Scripts {
    <environment include="Development">
        <script src="~/js/ppg/ppg.service-management-zone-maps.bundle.js" asp-append-version="true"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/js/ppg/ppg.service-management-zone-maps.bundle.min.js" asp-append-version="true"></script>
    </environment>
    
    <script>
        document.addEventListener('DOMContentLoaded', function documentReady() {
            this.removeEventListener('DOMContentLoaded', documentReady);
            PPG.manageZoneMaps.init();
        });
    </script>
}
