
@{
    ViewData["Title"] = "Service Management";
}

<h2 class="content-block">Service Management <i class="dx-icon dx-icon-spinright"></i> Manage Service Rules</h2>
<p class="page-desc">Service rules contain the complete list of parameters to drive carrier and service level based on package parameters​.</p>

<div class="content-block">
    <div class="ppg-container-cols">
        <div style="grid-column: 1 / span 12;">
            <div class="ppg-label">Customer\Location</div>
            @(Html.DevExtreme().SelectBox()
                .Name("CustomerName")
                .DataSource(d => d.Mvc().Controller("Common").LoadAction("GetSubClientSelectBoxData"))
                .DeferRendering(false)
                .Placeholder("")
                .DisplayExpr("Description")
                .ValueExpr("Name").DataSourceOptions(opt =>
                {
                    if (User.GetSite() != SiteConstants.AllSites)
                    {
                        opt.Filter($"['SiteName', '=', '{User.GetSite()}']");
                    }
                })
                .OnValueChanged("PPG.manageServiceRules.onCustomerValueChanged")
            )
        </div>
    </div>
</div>

<div class="content-block">
    <div class="dx-card" id="serviceOverrideCard">
        <div class="ppg-card-header-cols">
            <div style="grid-column: 1 / span 9;">
                @(Html.DevExtreme().Button()
                    .ID("upload-button")
                    .Icon("upload")
                    .OnClick("PPG.manageServiceRules.uploadButton_onClick"))
                @(Html.DevExtreme().Tooltip()
                    .Target("#upload-button")
                    .Position(Position.Top)
                    .ContentTemplate("Upload")
                    .ShowEvent("mouseenter")
                    .HideEvent("mouseleave"))
            </div>
            <div style="grid-column: 10 / span 3;" class="right">
                @(Html.DevExtreme().Button()
                .ID("exportButton")
                .Icon("xlsxfile")
                .Disabled(true)
                .OnClick("PPG.manageServiceRules.exportButton_onClick"))
                @(Html.DevExtreme().Tooltip()
                    .ID("exportButtonTooltip")
                    .Target("#exportButton")
                    .Position(Position.Top)
                    .ContentTemplate("Download")
                    .ShowEvent("mouseenter")
                    .HideEvent("mouseleave"))
            </div>
        </div>
        @(Html.DevExtreme().DataGrid<ActiveGroupViewModel>()
            .DataSource(d => d.Mvc()
            .Controller("ServiceManagement")
            .LoadAction(nameof(ParcelPrepGov.Web.Features.ServiceManagement.ServiceManagementController.Get)).LoadParams(new { customerName = new JS("PPG.manageServiceRules.getSelectedCustomer") })
            .OnLoading("PPG.manageServiceRules.grid_onLoading")
            .OnLoaded("PPG.manageServiceRules.grid_onLoaded")
            .Key("Id"))
            .ID("serviceRulesGrid")
            .Visible(false)
            .Selection(s => s.Mode(SelectionMode.Single))
            .HoverStateEnabled(true)
            .ShowColumnLines(true)
            .ShowRowLines(true)
            .ShowBorders(true)
            .HoverStateEnabled(true)
            .FocusedRowEnabled(true)
            .OnFocusedRowChanged("PPG.manageServiceRules.grid_onFocusedRowChanged")
            .LoadPanel(x => x.Enabled(true))
            .AllowColumnResizing(true)
            .AllowColumnReordering(true)
            .SearchPanel(searchPanel => searchPanel.Visible(false))
            .FilterRow(f => f.Visible(true))
            .Columns(columns => {
                columns.Add().DataField("StartDate").Caption("Start Date").DataType(GridColumnDataType.Date).Format(Format.ShortDate).SortOrder(SortOrder.Desc);
                columns.Add().DataField("Filename").Caption("File Name");
                columns.Add().DataField("UploadedBy").Caption("Upload By").Width(125);
                columns.Add().DataField("UploadDate").Caption("Upload Date\\Time").DataType(GridColumnDataType.DateTime).Format(Format.ShortDateShortTime).Width(200);
            })

        .Paging(paging => paging.PageSize(10))
        .Pager(pager =>
        {
            pager.ShowPageSizeSelector(true);
            pager.AllowedPageSizes(new[] { 5, 10, 20 });
            pager.ShowInfo(true);
        })
        )
    </div>
</div>

@(Html.DevExtreme().Popup()
        .ID("uploadServiceRulesPopup")
        .Width(800)
        .Height(400)
        .ShowTitle(true)
        .Title("Upload")
        .Visible(false)
        .DragEnabled(false)
        .CloseOnOutsideClick(false)
        .OnShowing("PPG.manageServiceRules.popup_onShowing")
        .OnHiding("PPG.manageServiceRules.popup_onHiding")
        .ContentTemplate(new TemplateName("uploadServiceRules-template")))

@using (Html.DevExtreme().NamedTemplate("uploadServiceRules-template"))
{
    @using (Html.DevExtreme().ValidationGroup("uploadServiceRulesValidationGroup"))
    {
        @await Html.PartialAsync("_UploadServiceRules")
    }
}

@(Html.DevExtreme().DataGrid<IEnumerable<ZipExcel>>()
    .ID("exportGrid")
    .Export(e => e.Enabled(true).AllowExportSelectedData(false))
    .OnExporting("PPG.manageServiceRules.exportGrid_onExporting")
    .Visible(false))

@section Scripts {
    <environment include="Development">
        <script src="~/js/ppg/ppg.manage-service-rules.bundle.js" asp-append-version="true"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/js/ppg/ppg.manage-service-rules.bundle.min.js" asp-append-version="true"></script>
    </environment>
    <script>
        document.addEventListener('DOMContentLoaded', function documentReady() {
            this.removeEventListener('DOMContentLoaded', documentReady);
            //PPG.downloadServiceRules.init('@User.GetClaimValue(PPGClaim.Site)');
            PPG.manageServiceRules.init();
            PPG.uploadServiceRules.init();
        });
    </script>
}


