@model ManageZipSchemasViewModel;

@{
    ViewData["Title"] = "Service Management";
    var zipTypes = new[] { "ZipsFedExHawaii", "ZipsUpsSat48", "ZipsUpsDas", "ZipsUspsRural" };
}

<h2 class="content-block">Service Management <i class="dx-icon dx-icon-spinright"></i> Manage Zip Schemas</h2>
<p class="page-desc">Zip Schemas represent list of zipcodes to be included in certain specific carrier and geographical service areas​.</p>

<div class="content-block">
    <div style="grid-column: 1 / span 12;" class="right">
        @(Html.DevExtreme()
        .SelectBox()
        .DataSource(zipTypes)
        .Value("")
        .OnValueChanged("PPG.manageZipSchemas.selectBox_valueChanged"))
    </div>
    <div class="dx-card" id="manageZipSchemasCard">
        <div class="ppg-card-header-cols">
            <div style="grid-column: 1 / span 8;">
                @(Html.DevExtreme().Button().ID("upload-button").Icon("upload")
                                .Disabled(true)
                .OnClick("PPG.manageZipSchemas.uploadButton_onClick")
                )
                @(Html.DevExtreme().Tooltip()
                        .Target("#upload-button")
                        .Position(Position.Top)
                        .ContentTemplate("Upload")
                        .ShowEvent("mouseenter")
                        .HideEvent("mouseleave"))
            </div>
            <div style="grid-column: 9 / span 4;" class="right">
                @(Html.DevExtreme().Button()
                .ID("exportButton")
                .Icon("xlsxfile")
                .Disabled(true)
                .OnClick("PPG.manageZipSchemas.exportButton_onClick"))
                @(Html.DevExtreme().Tooltip()
                    .ID("exportButtonTooltip")
                    .Target("#exportButton")
                    .Position(Position.Top)
                    .ContentTemplate("Download")
                    .ShowEvent("mouseenter")
                    .HideEvent("mouseleave"))
            </div>
        </div>
        @(Html.DevExtreme().DataGrid<ActiveGroupViewModel>()
    .ID("zipsGrid")
    .DataSource(ds => ds.Mvc()
        .Controller("ServiceManagement")
        .LoadAction("GetZipsByActiveGroupType")
        .LoadParams(new { activeGroupType = new JS("PPG.manageZipSchemas.getSelectedActiveGroupType") })
        .Key("Id")
        .OnLoading("PPG.manageZipSchemas.grid_onLoading")
        .OnLoaded("PPG.manageZipSchemas.grid_onLoaded")
    )
    .LoadPanel(x => x.Enabled(false))
    .Visible(false)
    .ShowColumnLines(true)
    .ShowRowLines(true)
    .ShowBorders(true)
    .LoadPanel(x => x.Enabled(true))
    .Selection(s => s.Mode(SelectionMode.Single))
    .HoverStateEnabled(true)
    .FocusedRowEnabled(true)
    .OnSelectionChanged("PPG.manageZipSchemas.grid_onSelectionChanged")
     .FilterRow(f => f.Visible(true))
    .Columns(columns => {
        columns.Add().DataField("StartDate").Caption("Start Date").DataType(GridColumnDataType.Date).Format(Format.ShortDate).SortOrder(SortOrder.Desc);
        columns.Add().DataField("Filename").Caption("File Name");
        columns.Add().DataField("UploadedBy").Caption("Upload By").Width(125);
        columns.Add().DataField("UploadDate").Caption("Upload Date\\Time").DataType(GridColumnDataType.DateTime).Format(Format.ShortDateShortTime).Width(200);
    })
        .Paging(paging => paging.PageSize(10))
        .Pager(pager =>
        {
            pager.ShowPageSizeSelector(true);
            pager.AllowedPageSizes(new[] { 5, 10, 20 });
            pager.ShowInfo(true);
        })
        )
    </div>
</div>

@(Html.DevExtreme().Popup()
        .ID("uploadZips-popup")
        .Width(600)
        .Height(400)
        .ShowTitle(true)
        .Title("Upload")
        .Visible(false)
        .DragEnabled(false)
        .CloseOnOutsideClick(false)
        .OnShowing("PPG.manageZipSchemas.popup_onShowing")
        .OnHiding("PPG.manageZipSchemas.popup_onHiding"))

<div id="formWrapper">
    @using (Html.DevExtreme().NamedTemplate("uploadZips-form-template-ZipsFedExHawaii"))
    {
        @using (Html.BeginForm("ImportZipSchemas", "ServiceManagement", FormMethod.Post, new { @id = "formZipsFedExHawaii" }))
        {
            @(Html.DevExtreme().Form<ManageZipSchemasViewModel>()
                .ID("ZipsFedExHawaiiForm")
                .ColCount(2)
                .Items(groups =>
                {
                    groups.AddGroup()
                    .ColSpan(2)
                    .ColCount(2)
                    .Items(items =>
                    {
                        items.AddSimpleFor(m => m.FedExHawaiiUploadFile)
                        .IsRequired(true)
                        .Template(@<text>
	                        @(Html.DevExtreme().FileUploader()
                                .ID("fedexHawaiiZipsFileUploader")
                                .SelectButtonText("FedEx Hawaii Zips File")
                                .LabelText("")
                                .Multiple(false)                                
                                .Name("FedExHawaiiUploadFile")
                                .Accept("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel")
                                .UploadMode(FileUploadMode.UseForm)
                                .AllowedFileExtensions(new[] { ".xls", ".xlsx" })
                                .OnValueChanged("PPG.manageZipSchemas.fedexHawaiiZipsFileUploader_onValueChanged")
                                )
	                        </text>);

                        items.AddSimpleFor(m => m.FedExHawaiiStartDate)
                        .IsRequired(true)
                        .Template(@<text>
	                        @(Html.DevExtreme()
                                .DateBoxFor(m => m.FedExHawaiiStartDate)
                                .Placeholder("")
                                .PickerType(DateBoxPickerType.Rollers)
                                .ID("fedExHawaiiDateBox")
                                .OnInitialized("PPG.manageZipSchemas.fedExHawaiiDateBox_onInitialized")
                                .OnValueChanged("PPG.manageZipSchemas.fedExHawaiiDateBox_onValueChanged")
                                )
	                        </text>);
                    });

                    groups.AddGroup()
                    .ColSpan(2)
                    .ColCount(2)
                    .Items(items =>
                    {
                        items.AddButton()
                            .ButtonOptions(b =>
                                b
                                .Text("Cancel")
                                .Type(ButtonType.Normal)
                                .UseSubmitBehavior(false)
                                .OnClick("PPG.manageZipSchemas.cancelZipsFedExHawaiiFormButton_onClick")
                            );

                        items.AddButton()
                            .ButtonOptions(b =>
                                b
                                .Text("Upload")
                                .Type(ButtonType.Success)
                                .UseSubmitBehavior(false)
                                .OnClick("PPG.manageZipSchemas.importZipsFedExHawaiiFormButton_onClick")
                            );
                    });
                })
            )
        }
    }
    @using (Html.DevExtreme().NamedTemplate("uploadZips-form-template-ZipsUpsSat48"))
    {
        @using (Html.BeginForm("ImportZipSchemas", "ServiceManagement", FormMethod.Post, new { @id = "formZipsUpsSat48" }))
        {
            @(Html.DevExtreme().Form<ManageZipSchemasViewModel>()
                .ID("ZipsUpsSat48Form")
                .ColCount(2)
                .Items(groups =>
                {
                    groups.AddGroup()
                    .ColSpan(2)
                    .ColCount(2)
                    .Items(items =>
                    {
                        items.AddSimpleFor(m => m.UpsNdaSat48File)
                        .IsRequired(true)
                        .Template(@<text>
	                        @(Html.DevExtreme().FileUploader()
                                .ID("upsNdaSat48FileUploader")
                                .SelectButtonText("Ups NDA Sat 48 Zips File")
                                .LabelText("")
                                .Multiple(false)
                                .Name("UpsNdaSat48File")
                                .Accept("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel")
                                .UploadMode(FileUploadMode.UseForm)
                                .AllowedFileExtensions(new[] { ".xls", ".xlsx" })
                                .OnValueChanged("PPG.manageZipSchemas.upsNdaSat48FileUploader_onValueChanged")
                                )
	                        </text>);

                        items.AddSimpleFor(m => m.UpsNdaSat48StartDate)
                        .IsRequired(true)
                        .Template(@<text>
	                        @(Html.DevExtreme()
                                .DateBoxFor(m => m.UpsNdaSat48StartDate)
                                .Placeholder("")
                                .PickerType(DateBoxPickerType.Rollers)
                                .ID("upsNdaSat48DateBox")
                                .OnInitialized("PPG.manageZipSchemas.upsNdaSat48DateBox_onInitialized")
                                .OnValueChanged("PPG.manageZipSchemas.upsNdaSat48DateBox_onValueChanged"))
	                        </text>);
                    });

                    groups.AddGroup()
                    .ColSpan(2)
                    .ColCount(2)
                    .Items(items =>
                    {
                        items.AddButton()
                            .ButtonOptions(b =>
                                b
                                .Text("Cancel")
                                .Type(ButtonType.Normal)
                                .UseSubmitBehavior(false)
                                .OnClick("PPG.manageZipSchemas.cancelZipsUpsSat48FormButton_onClick")
                            );

                        items.AddButton()
                            .ButtonOptions(b =>
                                b
                                .Text("Upload")
                                .Type(ButtonType.Success)
                                .UseSubmitBehavior(false)
                                .OnClick("PPG.manageZipSchemas.importZipsUpsSat48FormButton_onClick")
                            );
                    });
                })
            )
        }
    }

    @using (Html.DevExtreme().NamedTemplate("uploadZips-form-template-ZipsUpsDas"))
    {
        @using (Html.BeginForm("ImportZipSchemas", "ServiceManagement", FormMethod.Post, new { @id = "formZipsUpsDas" }))
        {
            @(Html.DevExtreme().Form<ManageZipSchemasViewModel>()
                .ID("ZipsUpsDasForm")
                .ColCount(2)
                .Items(groups =>
                {
                    groups.AddGroup()
                    .ColSpan(2)
                    .ColCount(2)
                    .Items(items =>
                    {
                        items.AddSimpleFor(m => m.UpsDasFile)
                        .IsRequired(true)
                        .Template(@<text>
	                        @(Html.DevExtreme().FileUploader()
                                .ID("upsDasFileUploader")
                                .SelectButtonText("Ups Das 48 Zips File")
                                .LabelText("")
                                .Multiple(false)
                                .Name("UpsDasFile")
                                .Accept("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel")
                                .UploadMode(FileUploadMode.UseForm)
                                .AllowedFileExtensions(new[] { ".xls", ".xlsx" })
                                .OnValueChanged("PPG.manageZipSchemas.upsDasFileUploader_onValueChanged")
                                )
	                        </text>);

                        items.AddSimpleFor(m => m.UpsDasStartDate)
                        .IsRequired(true)
                        .Template(@<text>
	                        @(Html.DevExtreme()
                                .DateBoxFor(m => m.UpsDasStartDate)
                                .Placeholder("")
                                .PickerType(DateBoxPickerType.Rollers)
                                .ID("upsDasDateBox")
                                .OnInitialized("PPG.manageZipSchemas.upsDasDateBox_onInitialized")
                                .OnValueChanged("PPG.manageZipSchemas.upsDasDateBox_onValueChanged")
                                )
	                        </text>);
                    });

                    groups.AddGroup()
                    .ColSpan(2)
                    .ColCount(2)
                    .Items(items =>
                    {
                        items.AddButton()
                            .ButtonOptions(b =>
                                b
                                //.ID("cancelButton")
                                .Text("Cancel")
                                .Type(ButtonType.Normal)
                                .UseSubmitBehavior(false)
                                .OnClick("PPG.manageZipSchemas.cancelZipsUpsDasFormButton_onClick")
                            );

                        items.AddButton()
                            .ButtonOptions(b =>
                                b
                                .Text("Upload")
                                .Type(ButtonType.Success)
                                .UseSubmitBehavior(false)
                                .OnClick("PPG.manageZipSchemas.importZipsUpsDasFormButton_onClick")
                            );
                    });
                })
            )
        }
    }

    @using (Html.DevExtreme().NamedTemplate("uploadZips-form-template-ZipsUspsRural"))
    {
        @using (Html.BeginForm("ImportZipSchemas", "ServiceManagement", FormMethod.Post, new { @id = "formZipsUspsRural" }))
        {
            @(Html.DevExtreme().Form<ManageZipSchemasViewModel>()
                .ID("ZipsUspsRuralForm")
                .ColCount(2)
                .Items(groups =>
                {
                    groups.AddGroup()
                    .ColSpan(2)
                    .ColCount(2)
                    .Items(items =>
                    {
                        items.AddSimpleFor(m => m.UspsRuralFile)
                        .IsRequired(true)
                        .Template(@<text>
	                        @(Html.DevExtreme().FileUploader()
                                .ID("uspsRuralFileUploader")
                                .SelectButtonText("Usps Rural Zips File")
                                .LabelText("")
                                .Multiple(false)
                                .Name("UspsRuralFile")
                                .Accept("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel")
                                .UploadMode(FileUploadMode.UseForm)
                                .AllowedFileExtensions(new[] { ".xls", ".xlsx" })
                                .OnValueChanged("PPG.manageZipSchemas.uspsRuralFileUploader_onValueChanged")
                                )
	                        </text>);

                        items.AddSimpleFor(m => m.UspsRuralStartDate)
                        .IsRequired(true)
                        .Template(@<text>
	                        @(Html.DevExtreme()
                                .DateBoxFor(m => m.UspsRuralStartDate)
                                .Placeholder("")
                                .PickerType(DateBoxPickerType.Rollers)
                                .ID("uspsRuralDateBox")
                                .OnInitialized("PPG.manageZipSchemas.uspsRuralDateBox_onInitialized")
                                .OnValueChanged("PPG.manageZipSchemas.uspsRuralDateBox_onValueChanged")
                                )
	                        </text>);
                    });

                    groups.AddGroup()
                    .ColSpan(2)
                    .ColCount(2)
                    .Items(items =>
                    {
                        items.AddButton()
                            .ButtonOptions(b =>
                                b
                                //.ID("cancelButton")
                                .Text("Cancel")
                                .Type(ButtonType.Normal)
                                .UseSubmitBehavior(false)
                                .OnClick("PPG.manageZipSchemas.cancelZipsUspsRuralFormButton_onClick")
                            );

                        items.AddButton()
                            .ButtonOptions(b =>
                                b
                                .Text("Upload")
                                .Type(ButtonType.Success)
                                .UseSubmitBehavior(false)
                                .OnClick("PPG.manageZipSchemas.importZipsUspsRuralFormButton_onClick")
                            );
                    });
                })
            )
        }
    }

</div>

@(Html.DevExtreme().DataGrid<IEnumerable<ZipExcel>>()
    .ID("exportGrid")
    .Export(e => e.Enabled(true).AllowExportSelectedData(false))
    .OnExporting("PPG.manageZipSchemas.exportGrid_onExporting")
    .Visible(false))

@section Scripts {
    <environment include="Development">
        <script src="~/js/ppg/ppg.service-management-zip-schemas.bundle.js" asp-append-version="true"></script>
    </environment>
    <environment exclude="Development">
        <script src="~/js/ppg/ppg.service-management-zip-schemas.bundle.min.js" asp-append-version="true"></script>
    </environment>
    
    <script>
        document.addEventListener('DOMContentLoaded', function documentReady() {
            this.removeEventListener('DOMContentLoaded', documentReady);
            PPG.manageZipSchemas.init();
        });
    </script>
}
