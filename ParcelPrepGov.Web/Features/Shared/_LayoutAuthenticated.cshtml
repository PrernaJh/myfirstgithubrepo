<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>MMS-@ViewData["Title"]</title>
    <link href="~/favicon.ico" rel="shortcut icon" type="image/x-icon" />
    <link rel="stylesheet" href="~/css/vendor.bundle.css" asp-append-version="true" />
    <environment exclude="Development">
        <link rel="stylesheet" href="~/css/ppg/ppg.bundle.min.css" asp-append-version="true" />
        <script src="~/js/vendor.bundle.min.js" asp-append-version="true"></script>
        <script src="~/js/ppg/ppg.core.bundle.min.js" asp-append-version="true"></script>
        <script src="~/js/ppg/ppg.layout-authenticated.bundle.min.js" asp-append-version="true"></script>
    </environment>
    <environment include="Development">
        <link rel="stylesheet" href="~/css/ppg/ppg.bundle.css" asp-append-version="true" />
        <script src="~/js/vendor.bundle.js" asp-append-version="true"></script>
        <script src="~/js/ppg/ppg.core.bundle.js" asp-append-version="true"></script>
        <script src="~/js/ppg/ppg.layout-authenticated.bundle.js" asp-append-version="true"></script>
    </environment>

    @RenderSection("Head", required: false)
    <style>
        .dx-datagrid .dx-data-row > td.minimal {
            font-size: 12px;
        }
    </style>
</head>

<body id="b" class="dx-viewport">
    <div class="loadPanel"></div>
    @Html.AntiForgeryToken()
    <div id="app-side-nav-outer-toolbar">
        @await Component.InvokeAsync("Toolbar")
        <div class="layout-body layout-body-hidden">
            @(Html.DevExtreme().Drawer()
        .ID("layout-drawer")
        .Position(DrawerPosition.Left)
        .Opened(new JS("PPG.layoutAuthenticated.restoreDrawerOpened()"))
                .Content(@<text>
                    <div id="layout-drawer-scrollview" class="with-footer">
                        <div class="content">
                            @RenderBody()
                        </div>
                        <div class="content-block">
                            <div class="content-footer">
                                <div id="footer">
                                    Copyright (c) 2000-2020 Mail Manifest System.
                                    <br />
                                    All trademarks or registered trademarks are property of their respective owners.
                                </div>
                            </div>
                        </div>
                    </div>
                </text>)
                .Template(new TemplateName("navigation-menu"))
            )
        </div>
    </div>

    @using (Html.DevExtreme().NamedTemplate("navigation-menu"))
    {
        <div class="menu-container dx-swatch-additional noPrint">

            @functions{

                bool IsCurrentPage(string action, string controller)
                {
                    var pageUrl = Url.Action(action, controller);
                    var currentPageUrl = Url.Action(ViewContext.RouteData.Values["action"].ToString(), ViewContext.RouteData.Values["controller"].ToString());

                    return pageUrl == currentPageUrl;
                }

                bool IsChildSelected(string controller)
                {
                    var currentController = ViewContext.RouteData.Values["controller"].ToString();
                    return controller == currentController;
                }

                bool HasPermission(string policyName)
                {

                    return (AuthorizationService.AuthorizeAsync(User, policyName).Result).Succeeded;
                }

                bool IsUserManagementSelected()
                {
                    string currentController = ViewContext.RouteData.Values["controller"].ToString();
                    var userManagementControllers = new List<string>
                                            {
                        nameof(ParcelPrepGov.Web.Features.UserManagement.UserManagementController),
                        nameof(ParcelPrepGov.Web.Features.UserManagement.SiteUserManagementController),
                        nameof(ParcelPrepGov.Web.Features.UserManagement.ClientUserManagementController),
                        nameof(ParcelPrepGov.Web.Features.UserManagement.SubClientUserManagementController),
                    };

                    return userManagementControllers.Contains(currentController + "Controller");
                }
            }

            @(Html.DevExtreme().TreeView()
                .Items(items => {

                    if(HasPermission(PPGClaim.WebPortal.Policy.Dashboard))
                        items.Add()
                            .Text("Dashboard")
                            .Disabled(true)
                            .Icon("palette").Option("path", Url.Action("Index", "Dashboard"))
                            .Option("path", Url.Action("Index", "Dashboard"))
                            .Selected(IsCurrentPage("Index", "Dashboard"));


                    if (HasPermission(PPGClaim.WebPortal.Policy.UserManager))
                        items.Add()
                        .Text("User Management")
                        .Icon("group")
                        .Option("path", Url.Action("Index", "AdminUserManagement"))
                        .Selected(IsCurrentPage("Index", "AdminUserManagement"));



                    if (HasPermission(PPGClaim.WebPortal.Policy.ServiceManagement))
                        items.Add()
                        .Text("Service Management")
                        .Icon("preferences")
                        .Expanded(IsChildSelected("ServiceManagement"))
                        .Selected(IsChildSelected("ServiceManagement"))
                            .Items(items =>
                            {
                                if (HasPermission(PPGClaim.WebPortal.ServiceManagement.ManageServiceRules))
                                    items.Add()
                                    .Text("Manage Service Rules")
                                    .Option("path", Url.Action("ManageServiceRules", "ServiceManagement"))
                                    .Selected(IsCurrentPage("ManageServiceRules", "ServiceManagement"));
                            })
                            .Items(items =>
                            {
                                if (HasPermission(PPGClaim.WebPortal.ServiceManagement.ManageExtendedServiceRules))
                                    items.Add()
                                    .Text("Manage Ext. Service Rules")
                                    .Option("path", Url.Action("ManageExtendedServiceRules", "ServiceManagement"))
                                    .Selected(IsCurrentPage("ManageExtendedServiceRules", "ServiceManagement"));
                            })
                            .Items(items =>
                            {
                                if (HasPermission(PPGClaim.WebPortal.ServiceManagement.ManageBinRules))
                                    items.Add()
                                    .Text("Manage Bin Schemas")
                                    .Option("path", Url.Action("ManageBinSchemas", "ServiceManagement"))
                                    .Selected(IsCurrentPage("ManageBinSchemas", "ServiceManagement"));
                            })
                            .Items(items =>
                            {
                                if (HasPermission(PPGClaim.WebPortal.ServiceManagement.ManageBinRules))
                                    items.Add()
                                    .Text("Manage Bin Mappings")
                                    .Option("path", Url.Action("ManageBinMappings", "ServiceManagement"))
                                    .Selected(IsCurrentPage("ManageBinMappings", "ServiceManagement"));
                            })
                            .Items(items =>
                            {
                                if (HasPermission(PPGClaim.WebPortal.ServiceManagement.ManageZipSchemas))
                                    items.Add()
                                    .Text("Manage Zip Schemas")
                                    .Option("path", Url.Action("ManageZipSchemas", "ServiceManagement"))
                                    .Selected(IsCurrentPage("ManageZipSchemas", "ServiceManagement"));
                            })
                            .Items(items =>
                            {
                                if (HasPermission(PPGClaim.WebPortal.ServiceManagement.ManageCostsAndCharges))
                                    items.Add()
                                    .Text("Manage Package Rates")
                                    .Option("path", Url.Action("ManagePackageRates", "ServiceManagement"))
                                    .Selected(IsCurrentPage("ManagePackageRates", "ServiceManagement"));
                            })
                            .Items(items =>
                            {
                                if (HasPermission(PPGClaim.WebPortal.ServiceManagement.ManageCostsAndCharges))
                                    items.Add()
                                    .Text("Manage Container Rates")
                                    .Option("path", Url.Action("ManageContainerRates", "ServiceManagement"))
                                    .Selected(IsCurrentPage("ManageContainerRates", "ServiceManagement"));
                            })
                            .Items(items =>
                            {
                                if (HasPermission(PPGClaim.WebPortal.ServiceManagement.ManageSiteAlerts))
                                    items.Add()
                                    .Text("Manage Site Alerts")
                                    .Option("path", Url.Action("ManageSiteAlerts", "SiteUserManagement"))
                                    .Selected(IsCurrentPage("ManageSiteAlerts", "SiteUserManagement"));

                            })
                            .Items(items =>
                            {
                                if (HasPermission(PPGClaim.WebPortal.ServiceManagement.ManageUspsRegions))
                                    items.Add()
                                    .Text("Manage USPS Regions")
                                    .Option("path", Url.Action("ManageUspsRegions", "ServiceManagement"))
                                    .Selected(IsCurrentPage("ManageUspsRegions", "ServiceManagement"));

                            })

                            .Items(items =>
                            {
                                if(HasPermission(PPGClaim.WebPortal.ServiceManagement.ManageUspsHolidays))
                                    items.Add()
                                        .Text("Manage USPS Holidays")
                                        .Option("path", Url.Action("ManageUspsHolidays", "ServiceManagement"))
                                        .Selected(IsCurrentPage("ManageUspsHolidays", "ServiceManagement"));
                            })

                            .Items(items =>
                            {
                                if (HasPermission(PPGClaim.WebPortal.ServiceManagement.ManageUspsEvsCodes))
                                    items.Add()
                                    .Text("Manage USPS Evs Code")
                                    .Option("path", Url.Action("ManageUspsEvsCodes", "ServiceManagement"))
                                    .Selected(IsCurrentPage("ManageUspsEvsCodes", "ServiceManagement"));
                            })
                            .Items(items =>
                            {
                                if (HasPermission(PPGClaim.WebPortal.ServiceManagement.ManageUspsVisnSite))
                                    items.Add()
                                    .Text("Manage CMOP VISN Sites")
                                    .Option("path", Url.Action("ManageCMOPVISNSites", "ServiceManagement"))
                                    .Selected(IsCurrentPage("ManageCMOPVISNSites", "ServiceManagement"));
                            })
                            .Items(items =>
                            {
                                if(HasPermission(PPGClaim.WebPortal.ServiceManagement.ManageZipSchemas))
                                    items.Add()
                                    .Text("Manage Zip Overrides")
                                    .Option("path", Url.Action("ZipCodeServiceOverride", "ServiceManagement"))
                                    .Selected(IsCurrentPage("ZipCodeServiceOverride", "ServiceManagement"));
                            })
                            .Items(items =>
                            {
                                if(HasPermission(PPGClaim.WebPortal.ServiceManagement.ManageZoneMaps))
                                    items.Add()
                                    .Text("Manage Zone Maps")
                                    .Option("path", Url.Action("ManageZoneMaps", "ServiceManagement"))
                                    .Selected(IsCurrentPage("ManageZoneMaps", "ServiceManagement"));
                            })
                            .Items(items =>
                            {
                                if(HasPermission(PPGClaim.WebPortal.ServiceManagement.ManageGeoDescriptors))
                                    items.Add()
                                    .Text("Manage UPS GEO Descriptors")
                                    .Option("path", Url.Action("ManageGeoDescriptors", "ServiceManagement"))
                                    .Selected(IsCurrentPage("ManageGeoDescriptors", "ServiceManagement"));
                            });

                    if (HasPermission(PPGClaim.WebPortal.FileManagement.EndOfDayFiles) || HasPermission(PPGClaim.WebPortal.FileManagement.AsnImports))
                        items.Add()
                        .Text("File Management")
                        .Icon("folder")
                        .Expanded(IsChildSelected("FileManagement"))
                        .Selected(IsChildSelected("FileManagement"))
                            .Items(items =>
                            {
                                if (HasPermission(PPGClaim.WebPortal.FileManagement.EndOfDayFiles))
                                    items.Add()
                                    .Text("End of Day Files")
                                    .Option("path", Url.Action("EndOfDayFiles", "FileManagement"))
                                    .Selected(IsCurrentPage("EndOfDayFiles", "FileManagement"));

                                if (HasPermission(PPGClaim.WebPortal.FileManagement.AsnImports))
                                    items.Add()
                                    .Text("ASN Imports")
                                    .Option("path", Url.Action("ASNImports", "FileManagement"))
                                    .Selected(IsCurrentPage("ASNImports", "FileManagement"));
                            });


                    if (HasPermission(PPGClaim.WebPortal.Policy.Reporting))
                        items.Add()
                        .Text("Reporting")
                        .Icon("datafield")
                        .Option("path", Url.Action("Index", "Reports"))
                        .Selected(IsCurrentPage("Index", "Reports"));


                    if (HasPermission(PPGClaim.WebPortal.PackageManagement.PackageSearch))
                    {
                        items.Add()
                        .Text("Package Search")
                        .Option("path", Url.Action("Index", "PackageSearch"))
                        .Icon("search")
                        .Selected(IsCurrentPage("Index", "PackageSearch"));
                    }

                    if (HasPermission(PPGClaim.WebPortal.ContainerManagement.ContainerSearch))
                    {
                        items.Add()
                        .Text("Container Search")
                        .Option("path", Url.Action("Index", "ContainerSearch"))
                        .Icon("search")
                        .Selected(IsCurrentPage("Index", "ContainerSearch"));
                    }

                    if (HasPermission(PPGClaim.WebPortal.PackageManagement.ReadPackageRecall)
                        || HasPermission(PPGClaim.WebPortal.PackageManagement.ReadPackageRelease))
                        items.Add()
                        .Text("Package Recall/Release")
                        .Icon("undo")
                        .Option("path", Url.Action("Index", "RecallRelease"))
                        .Selected(IsCurrentPage("Index", "RecallRelease"));

                    if (HasPermission(PPGClaim.WebPortal.ServiceManagement.ServiceOverride))
                        items.Add()
                        .Text("Service Override")
                        .Icon("hierarchy")
                        .Option("path", Url.Action("Index", "ServiceOverride"))
                        .Selected(IsCurrentPage("Index", "ServiceOverride"));

                    if (HasPermission(PPGClaim.WebPortal.FileManagement.AzureBlob))
                        items.Add()
                        .Text("Financials")
                        .Icon("money")
                        .Option("path", Url.Action("AzureServerBinding", "Financials"))
                        .Selected(IsCurrentPage("AzureServerBinding", "Financials"));

                    if (HasPermission(PPGClaim.WebPortal.FileManagement.ProgramManagementBlob))
                        items.Add()
                        .Text("Program Management")
                        .Icon("box")
                        .Option("path", Url.Action("BulletinBinding", "bulletin"))
                        .Selected(IsCurrentPage("BulletinBinding", "Bulletin"));

                    if (!User.IsClientWebPackageSearchUser())
                        items.Add()
                        .Text("Package Inquiry")
                        .Icon("help").Option("path", Url.Action("HelpDeskRedirect", "Landing"))
                        .Option("path", Url.Action("HelpDeskRedirect", "Landing"));
                })
                .ExpandEvent(TreeViewExpandEvent.Click)
                .SelectionMode(NavSelectionMode.Multiple)
                .SelectNodesRecursive(false)
                .SelectedExpr("selected")
                .Width(250)
                .ID("layout-treeview")
                .OnItemClick("PPG.layoutAuthenticated.onTreeViewItemClick"))

        </div>


    }

    <div id="ajaxing-panels"></div>
    @RenderSection("Scripts", required: false)

    @await Html.PartialAsync("_SignInPopup")

    <script>
        document.addEventListener('DOMContentLoaded', function documentReady() {
            this.removeEventListener('DOMContentLoaded', documentReady);
            PPG.toastr.tempData('@TempData["Toast"]');
            PPG.layoutAuthenticated.init();
        });
    </script>
</body>
</html>